/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Caplinked.Client;
using Caplinked.Model;

namespace Caplinked.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatermarkApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete custom watermark
        /// </summary>
        /// <remarks>
        /// Delete custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to delete</param>
        /// <returns>StatusMessage</returns>
        StatusMessage DeleteWatermarkId (int? id);

        /// <summary>
        /// Delete custom watermark
        /// </summary>
        /// <remarks>
        /// Delete custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to delete</param>
        /// <returns>ApiResponse of StatusMessage</returns>
        ApiResponse<StatusMessage> DeleteWatermarkIdWithHttpInfo (int? id);
        /// <summary>
        /// Get custom watermark setting
        /// </summary>
        /// <remarks>
        /// Get custom watermark setting
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting</param>
        /// <returns>CustomWatermarkSetting</returns>
        CustomWatermarkSetting GetWatermarkId (int? id);

        /// <summary>
        /// Get custom watermark setting
        /// </summary>
        /// <remarks>
        /// Get custom watermark setting
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting</param>
        /// <returns>ApiResponse of CustomWatermarkSetting</returns>
        ApiResponse<CustomWatermarkSetting> GetWatermarkIdWithHttpInfo (int? id);
        /// <summary>
        /// Add custom watermark
        /// </summary>
        /// <remarks>
        /// Add custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of the team</param>
        /// <param name="customText">Custom watermark text</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional, default to 0.5)</param>
        /// <param name="fontSize">Font size in pixels (optional, default to 18)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional, default to 0)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional, default to center)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional, default to center)</param>
        /// <param name="displayUserName">Display user name (optional, default to true)</param>
        /// <param name="displayUserEmail">Display user email address (optional, default to true)</param>
        /// <param name="displayIpAddress">Display user IP address (optional, default to true)</param>
        /// <param name="displayTime">Display time (optional, default to true)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>CustomWatermarkSetting</returns>
        CustomWatermarkSetting PostWatermark (int? teamId, string customText, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null);

        /// <summary>
        /// Add custom watermark
        /// </summary>
        /// <remarks>
        /// Add custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of the team</param>
        /// <param name="customText">Custom watermark text</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional, default to 0.5)</param>
        /// <param name="fontSize">Font size in pixels (optional, default to 18)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional, default to 0)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional, default to center)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional, default to center)</param>
        /// <param name="displayUserName">Display user name (optional, default to true)</param>
        /// <param name="displayUserEmail">Display user email address (optional, default to true)</param>
        /// <param name="displayIpAddress">Display user IP address (optional, default to true)</param>
        /// <param name="displayTime">Display time (optional, default to true)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>ApiResponse of CustomWatermarkSetting</returns>
        ApiResponse<CustomWatermarkSetting> PostWatermarkWithHttpInfo (int? teamId, string customText, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null);
        /// <summary>
        /// Update custom watermark
        /// </summary>
        /// <remarks>
        /// Update custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to update</param>
        /// <param name="customText">Custom watermark text (optional)</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional)</param>
        /// <param name="fontSize">Font size in pixels (optional)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional)</param>
        /// <param name="displayUserName">Display user name (optional)</param>
        /// <param name="displayUserEmail">Display user email address (optional)</param>
        /// <param name="displayIpAddress">Display user IP address (optional)</param>
        /// <param name="displayTime">Display time (optional)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>CustomWatermarkSetting</returns>
        CustomWatermarkSetting PutWatermarkId (int? id, string customText = null, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null);

        /// <summary>
        /// Update custom watermark
        /// </summary>
        /// <remarks>
        /// Update custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to update</param>
        /// <param name="customText">Custom watermark text (optional)</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional)</param>
        /// <param name="fontSize">Font size in pixels (optional)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional)</param>
        /// <param name="displayUserName">Display user name (optional)</param>
        /// <param name="displayUserEmail">Display user email address (optional)</param>
        /// <param name="displayIpAddress">Display user IP address (optional)</param>
        /// <param name="displayTime">Display time (optional)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>ApiResponse of CustomWatermarkSetting</returns>
        ApiResponse<CustomWatermarkSetting> PutWatermarkIdWithHttpInfo (int? id, string customText = null, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete custom watermark
        /// </summary>
        /// <remarks>
        /// Delete custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to delete</param>
        /// <returns>Task of StatusMessage</returns>
        System.Threading.Tasks.Task<StatusMessage> DeleteWatermarkIdAsync (int? id);

        /// <summary>
        /// Delete custom watermark
        /// </summary>
        /// <remarks>
        /// Delete custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to delete</param>
        /// <returns>Task of ApiResponse (StatusMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusMessage>> DeleteWatermarkIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get custom watermark setting
        /// </summary>
        /// <remarks>
        /// Get custom watermark setting
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting</param>
        /// <returns>Task of CustomWatermarkSetting</returns>
        System.Threading.Tasks.Task<CustomWatermarkSetting> GetWatermarkIdAsync (int? id);

        /// <summary>
        /// Get custom watermark setting
        /// </summary>
        /// <remarks>
        /// Get custom watermark setting
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting</param>
        /// <returns>Task of ApiResponse (CustomWatermarkSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomWatermarkSetting>> GetWatermarkIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Add custom watermark
        /// </summary>
        /// <remarks>
        /// Add custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of the team</param>
        /// <param name="customText">Custom watermark text</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional, default to 0.5)</param>
        /// <param name="fontSize">Font size in pixels (optional, default to 18)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional, default to 0)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional, default to center)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional, default to center)</param>
        /// <param name="displayUserName">Display user name (optional, default to true)</param>
        /// <param name="displayUserEmail">Display user email address (optional, default to true)</param>
        /// <param name="displayIpAddress">Display user IP address (optional, default to true)</param>
        /// <param name="displayTime">Display time (optional, default to true)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>Task of CustomWatermarkSetting</returns>
        System.Threading.Tasks.Task<CustomWatermarkSetting> PostWatermarkAsync (int? teamId, string customText, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null);

        /// <summary>
        /// Add custom watermark
        /// </summary>
        /// <remarks>
        /// Add custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of the team</param>
        /// <param name="customText">Custom watermark text</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional, default to 0.5)</param>
        /// <param name="fontSize">Font size in pixels (optional, default to 18)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional, default to 0)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional, default to center)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional, default to center)</param>
        /// <param name="displayUserName">Display user name (optional, default to true)</param>
        /// <param name="displayUserEmail">Display user email address (optional, default to true)</param>
        /// <param name="displayIpAddress">Display user IP address (optional, default to true)</param>
        /// <param name="displayTime">Display time (optional, default to true)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>Task of ApiResponse (CustomWatermarkSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomWatermarkSetting>> PostWatermarkAsyncWithHttpInfo (int? teamId, string customText, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null);
        /// <summary>
        /// Update custom watermark
        /// </summary>
        /// <remarks>
        /// Update custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to update</param>
        /// <param name="customText">Custom watermark text (optional)</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional)</param>
        /// <param name="fontSize">Font size in pixels (optional)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional)</param>
        /// <param name="displayUserName">Display user name (optional)</param>
        /// <param name="displayUserEmail">Display user email address (optional)</param>
        /// <param name="displayIpAddress">Display user IP address (optional)</param>
        /// <param name="displayTime">Display time (optional)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>Task of CustomWatermarkSetting</returns>
        System.Threading.Tasks.Task<CustomWatermarkSetting> PutWatermarkIdAsync (int? id, string customText = null, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null);

        /// <summary>
        /// Update custom watermark
        /// </summary>
        /// <remarks>
        /// Update custom watermark
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to update</param>
        /// <param name="customText">Custom watermark text (optional)</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional)</param>
        /// <param name="fontSize">Font size in pixels (optional)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional)</param>
        /// <param name="displayUserName">Display user name (optional)</param>
        /// <param name="displayUserEmail">Display user email address (optional)</param>
        /// <param name="displayIpAddress">Display user IP address (optional)</param>
        /// <param name="displayTime">Display time (optional)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>Task of ApiResponse (CustomWatermarkSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomWatermarkSetting>> PutWatermarkIdAsyncWithHttpInfo (int? id, string customText = null, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WatermarkApi : IWatermarkApi
    {
        private Caplinked.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WatermarkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WatermarkApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatermarkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WatermarkApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Caplinked.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete custom watermark Delete custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to delete</param>
        /// <returns>StatusMessage</returns>
        public StatusMessage DeleteWatermarkId (int? id)
        {
             ApiResponse<StatusMessage> localVarResponse = DeleteWatermarkIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete custom watermark Delete custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to delete</param>
        /// <returns>ApiResponse of StatusMessage</returns>
        public ApiResponse< StatusMessage > DeleteWatermarkIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WatermarkApi->DeleteWatermarkId");

            var localVarPath = "/watermark/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWatermarkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusMessage)));
        }

        /// <summary>
        /// Delete custom watermark Delete custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to delete</param>
        /// <returns>Task of StatusMessage</returns>
        public async System.Threading.Tasks.Task<StatusMessage> DeleteWatermarkIdAsync (int? id)
        {
             ApiResponse<StatusMessage> localVarResponse = await DeleteWatermarkIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete custom watermark Delete custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to delete</param>
        /// <returns>Task of ApiResponse (StatusMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusMessage>> DeleteWatermarkIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WatermarkApi->DeleteWatermarkId");

            var localVarPath = "/watermark/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWatermarkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusMessage)));
        }

        /// <summary>
        /// Get custom watermark setting Get custom watermark setting
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting</param>
        /// <returns>CustomWatermarkSetting</returns>
        public CustomWatermarkSetting GetWatermarkId (int? id)
        {
             ApiResponse<CustomWatermarkSetting> localVarResponse = GetWatermarkIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get custom watermark setting Get custom watermark setting
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting</param>
        /// <returns>ApiResponse of CustomWatermarkSetting</returns>
        public ApiResponse< CustomWatermarkSetting > GetWatermarkIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WatermarkApi->GetWatermarkId");

            var localVarPath = "/watermark/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWatermarkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomWatermarkSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomWatermarkSetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomWatermarkSetting)));
        }

        /// <summary>
        /// Get custom watermark setting Get custom watermark setting
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting</param>
        /// <returns>Task of CustomWatermarkSetting</returns>
        public async System.Threading.Tasks.Task<CustomWatermarkSetting> GetWatermarkIdAsync (int? id)
        {
             ApiResponse<CustomWatermarkSetting> localVarResponse = await GetWatermarkIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get custom watermark setting Get custom watermark setting
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting</param>
        /// <returns>Task of ApiResponse (CustomWatermarkSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomWatermarkSetting>> GetWatermarkIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WatermarkApi->GetWatermarkId");

            var localVarPath = "/watermark/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWatermarkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomWatermarkSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomWatermarkSetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomWatermarkSetting)));
        }

        /// <summary>
        /// Add custom watermark Add custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of the team</param>
        /// <param name="customText">Custom watermark text</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional, default to 0.5)</param>
        /// <param name="fontSize">Font size in pixels (optional, default to 18)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional, default to 0)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional, default to center)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional, default to center)</param>
        /// <param name="displayUserName">Display user name (optional, default to true)</param>
        /// <param name="displayUserEmail">Display user email address (optional, default to true)</param>
        /// <param name="displayIpAddress">Display user IP address (optional, default to true)</param>
        /// <param name="displayTime">Display time (optional, default to true)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>CustomWatermarkSetting</returns>
        public CustomWatermarkSetting PostWatermark (int? teamId, string customText, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null)
        {
             ApiResponse<CustomWatermarkSetting> localVarResponse = PostWatermarkWithHttpInfo(teamId, customText, color, opacity, fontSize, rotation, hposition, vposition, displayUserName, displayUserEmail, displayIpAddress, displayTime, displayWorkspaceName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add custom watermark Add custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of the team</param>
        /// <param name="customText">Custom watermark text</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional, default to 0.5)</param>
        /// <param name="fontSize">Font size in pixels (optional, default to 18)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional, default to 0)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional, default to center)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional, default to center)</param>
        /// <param name="displayUserName">Display user name (optional, default to true)</param>
        /// <param name="displayUserEmail">Display user email address (optional, default to true)</param>
        /// <param name="displayIpAddress">Display user IP address (optional, default to true)</param>
        /// <param name="displayTime">Display time (optional, default to true)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>ApiResponse of CustomWatermarkSetting</returns>
        public ApiResponse< CustomWatermarkSetting > PostWatermarkWithHttpInfo (int? teamId, string customText, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling WatermarkApi->PostWatermark");
            // verify the required parameter 'customText' is set
            if (customText == null)
                throw new ApiException(400, "Missing required parameter 'customText' when calling WatermarkApi->PostWatermark");

            var localVarPath = "/watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarFormParams.Add("team_id", Configuration.ApiClient.ParameterToString(teamId)); // form parameter
            if (customText != null) localVarFormParams.Add("custom_text", Configuration.ApiClient.ParameterToString(customText)); // form parameter
            if (color != null) localVarFormParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // form parameter
            if (opacity != null) localVarFormParams.Add("opacity", Configuration.ApiClient.ParameterToString(opacity)); // form parameter
            if (fontSize != null) localVarFormParams.Add("font_size", Configuration.ApiClient.ParameterToString(fontSize)); // form parameter
            if (rotation != null) localVarFormParams.Add("rotation", Configuration.ApiClient.ParameterToString(rotation)); // form parameter
            if (hposition != null) localVarFormParams.Add("hposition", Configuration.ApiClient.ParameterToString(hposition)); // form parameter
            if (vposition != null) localVarFormParams.Add("vposition", Configuration.ApiClient.ParameterToString(vposition)); // form parameter
            if (displayUserName != null) localVarFormParams.Add("display_user_name", Configuration.ApiClient.ParameterToString(displayUserName)); // form parameter
            if (displayUserEmail != null) localVarFormParams.Add("display_user_email", Configuration.ApiClient.ParameterToString(displayUserEmail)); // form parameter
            if (displayIpAddress != null) localVarFormParams.Add("display_ip_address", Configuration.ApiClient.ParameterToString(displayIpAddress)); // form parameter
            if (displayTime != null) localVarFormParams.Add("display_time", Configuration.ApiClient.ParameterToString(displayTime)); // form parameter
            if (displayWorkspaceName != null) localVarFormParams.Add("display_workspace_name", Configuration.ApiClient.ParameterToString(displayWorkspaceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomWatermarkSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomWatermarkSetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomWatermarkSetting)));
        }

        /// <summary>
        /// Add custom watermark Add custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of the team</param>
        /// <param name="customText">Custom watermark text</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional, default to 0.5)</param>
        /// <param name="fontSize">Font size in pixels (optional, default to 18)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional, default to 0)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional, default to center)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional, default to center)</param>
        /// <param name="displayUserName">Display user name (optional, default to true)</param>
        /// <param name="displayUserEmail">Display user email address (optional, default to true)</param>
        /// <param name="displayIpAddress">Display user IP address (optional, default to true)</param>
        /// <param name="displayTime">Display time (optional, default to true)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>Task of CustomWatermarkSetting</returns>
        public async System.Threading.Tasks.Task<CustomWatermarkSetting> PostWatermarkAsync (int? teamId, string customText, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null)
        {
             ApiResponse<CustomWatermarkSetting> localVarResponse = await PostWatermarkAsyncWithHttpInfo(teamId, customText, color, opacity, fontSize, rotation, hposition, vposition, displayUserName, displayUserEmail, displayIpAddress, displayTime, displayWorkspaceName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add custom watermark Add custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of the team</param>
        /// <param name="customText">Custom watermark text</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional, default to #333333)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional, default to 0.5)</param>
        /// <param name="fontSize">Font size in pixels (optional, default to 18)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional, default to 0)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional, default to center)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional, default to center)</param>
        /// <param name="displayUserName">Display user name (optional, default to true)</param>
        /// <param name="displayUserEmail">Display user email address (optional, default to true)</param>
        /// <param name="displayIpAddress">Display user IP address (optional, default to true)</param>
        /// <param name="displayTime">Display time (optional, default to true)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>Task of ApiResponse (CustomWatermarkSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomWatermarkSetting>> PostWatermarkAsyncWithHttpInfo (int? teamId, string customText, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling WatermarkApi->PostWatermark");
            // verify the required parameter 'customText' is set
            if (customText == null)
                throw new ApiException(400, "Missing required parameter 'customText' when calling WatermarkApi->PostWatermark");

            var localVarPath = "/watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarFormParams.Add("team_id", Configuration.ApiClient.ParameterToString(teamId)); // form parameter
            if (customText != null) localVarFormParams.Add("custom_text", Configuration.ApiClient.ParameterToString(customText)); // form parameter
            if (color != null) localVarFormParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // form parameter
            if (opacity != null) localVarFormParams.Add("opacity", Configuration.ApiClient.ParameterToString(opacity)); // form parameter
            if (fontSize != null) localVarFormParams.Add("font_size", Configuration.ApiClient.ParameterToString(fontSize)); // form parameter
            if (rotation != null) localVarFormParams.Add("rotation", Configuration.ApiClient.ParameterToString(rotation)); // form parameter
            if (hposition != null) localVarFormParams.Add("hposition", Configuration.ApiClient.ParameterToString(hposition)); // form parameter
            if (vposition != null) localVarFormParams.Add("vposition", Configuration.ApiClient.ParameterToString(vposition)); // form parameter
            if (displayUserName != null) localVarFormParams.Add("display_user_name", Configuration.ApiClient.ParameterToString(displayUserName)); // form parameter
            if (displayUserEmail != null) localVarFormParams.Add("display_user_email", Configuration.ApiClient.ParameterToString(displayUserEmail)); // form parameter
            if (displayIpAddress != null) localVarFormParams.Add("display_ip_address", Configuration.ApiClient.ParameterToString(displayIpAddress)); // form parameter
            if (displayTime != null) localVarFormParams.Add("display_time", Configuration.ApiClient.ParameterToString(displayTime)); // form parameter
            if (displayWorkspaceName != null) localVarFormParams.Add("display_workspace_name", Configuration.ApiClient.ParameterToString(displayWorkspaceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomWatermarkSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomWatermarkSetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomWatermarkSetting)));
        }

        /// <summary>
        /// Update custom watermark Update custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to update</param>
        /// <param name="customText">Custom watermark text (optional)</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional)</param>
        /// <param name="fontSize">Font size in pixels (optional)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional)</param>
        /// <param name="displayUserName">Display user name (optional)</param>
        /// <param name="displayUserEmail">Display user email address (optional)</param>
        /// <param name="displayIpAddress">Display user IP address (optional)</param>
        /// <param name="displayTime">Display time (optional)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>CustomWatermarkSetting</returns>
        public CustomWatermarkSetting PutWatermarkId (int? id, string customText = null, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null)
        {
             ApiResponse<CustomWatermarkSetting> localVarResponse = PutWatermarkIdWithHttpInfo(id, customText, color, opacity, fontSize, rotation, hposition, vposition, displayUserName, displayUserEmail, displayIpAddress, displayTime, displayWorkspaceName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update custom watermark Update custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to update</param>
        /// <param name="customText">Custom watermark text (optional)</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional)</param>
        /// <param name="fontSize">Font size in pixels (optional)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional)</param>
        /// <param name="displayUserName">Display user name (optional)</param>
        /// <param name="displayUserEmail">Display user email address (optional)</param>
        /// <param name="displayIpAddress">Display user IP address (optional)</param>
        /// <param name="displayTime">Display time (optional)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>ApiResponse of CustomWatermarkSetting</returns>
        public ApiResponse< CustomWatermarkSetting > PutWatermarkIdWithHttpInfo (int? id, string customText = null, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WatermarkApi->PutWatermarkId");

            var localVarPath = "/watermark/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (customText != null) localVarFormParams.Add("custom_text", Configuration.ApiClient.ParameterToString(customText)); // form parameter
            if (color != null) localVarFormParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // form parameter
            if (opacity != null) localVarFormParams.Add("opacity", Configuration.ApiClient.ParameterToString(opacity)); // form parameter
            if (fontSize != null) localVarFormParams.Add("font_size", Configuration.ApiClient.ParameterToString(fontSize)); // form parameter
            if (rotation != null) localVarFormParams.Add("rotation", Configuration.ApiClient.ParameterToString(rotation)); // form parameter
            if (hposition != null) localVarFormParams.Add("hposition", Configuration.ApiClient.ParameterToString(hposition)); // form parameter
            if (vposition != null) localVarFormParams.Add("vposition", Configuration.ApiClient.ParameterToString(vposition)); // form parameter
            if (displayUserName != null) localVarFormParams.Add("display_user_name", Configuration.ApiClient.ParameterToString(displayUserName)); // form parameter
            if (displayUserEmail != null) localVarFormParams.Add("display_user_email", Configuration.ApiClient.ParameterToString(displayUserEmail)); // form parameter
            if (displayIpAddress != null) localVarFormParams.Add("display_ip_address", Configuration.ApiClient.ParameterToString(displayIpAddress)); // form parameter
            if (displayTime != null) localVarFormParams.Add("display_time", Configuration.ApiClient.ParameterToString(displayTime)); // form parameter
            if (displayWorkspaceName != null) localVarFormParams.Add("display_workspace_name", Configuration.ApiClient.ParameterToString(displayWorkspaceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWatermarkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomWatermarkSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomWatermarkSetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomWatermarkSetting)));
        }

        /// <summary>
        /// Update custom watermark Update custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to update</param>
        /// <param name="customText">Custom watermark text (optional)</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional)</param>
        /// <param name="fontSize">Font size in pixels (optional)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional)</param>
        /// <param name="displayUserName">Display user name (optional)</param>
        /// <param name="displayUserEmail">Display user email address (optional)</param>
        /// <param name="displayIpAddress">Display user IP address (optional)</param>
        /// <param name="displayTime">Display time (optional)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>Task of CustomWatermarkSetting</returns>
        public async System.Threading.Tasks.Task<CustomWatermarkSetting> PutWatermarkIdAsync (int? id, string customText = null, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null)
        {
             ApiResponse<CustomWatermarkSetting> localVarResponse = await PutWatermarkIdAsyncWithHttpInfo(id, customText, color, opacity, fontSize, rotation, hposition, vposition, displayUserName, displayUserEmail, displayIpAddress, displayTime, displayWorkspaceName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update custom watermark Update custom watermark
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the watermark setting to update</param>
        /// <param name="customText">Custom watermark text (optional)</param>
        /// <param name="color">Hexadecimal color value (i.e. #eee, #e1e1e1) (optional)</param>
        /// <param name="opacity">Opacity 0 to 1.0 (optional)</param>
        /// <param name="fontSize">Font size in pixels (optional)</param>
        /// <param name="rotation">Rotation degrees (-90 to 90) (optional)</param>
        /// <param name="hposition">Horizontal position (left, center, right) (optional)</param>
        /// <param name="vposition">Vertical position (top, center, bottom) (optional)</param>
        /// <param name="displayUserName">Display user name (optional)</param>
        /// <param name="displayUserEmail">Display user email address (optional)</param>
        /// <param name="displayIpAddress">Display user IP address (optional)</param>
        /// <param name="displayTime">Display time (optional)</param>
        /// <param name="displayWorkspaceName">Display workspace name (optional)</param>
        /// <returns>Task of ApiResponse (CustomWatermarkSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomWatermarkSetting>> PutWatermarkIdAsyncWithHttpInfo (int? id, string customText = null, string color = null, float? opacity = null, int? fontSize = null, int? rotation = null, string hposition = null, string vposition = null, bool? displayUserName = null, bool? displayUserEmail = null, bool? displayIpAddress = null, bool? displayTime = null, bool? displayWorkspaceName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WatermarkApi->PutWatermarkId");

            var localVarPath = "/watermark/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (customText != null) localVarFormParams.Add("custom_text", Configuration.ApiClient.ParameterToString(customText)); // form parameter
            if (color != null) localVarFormParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // form parameter
            if (opacity != null) localVarFormParams.Add("opacity", Configuration.ApiClient.ParameterToString(opacity)); // form parameter
            if (fontSize != null) localVarFormParams.Add("font_size", Configuration.ApiClient.ParameterToString(fontSize)); // form parameter
            if (rotation != null) localVarFormParams.Add("rotation", Configuration.ApiClient.ParameterToString(rotation)); // form parameter
            if (hposition != null) localVarFormParams.Add("hposition", Configuration.ApiClient.ParameterToString(hposition)); // form parameter
            if (vposition != null) localVarFormParams.Add("vposition", Configuration.ApiClient.ParameterToString(vposition)); // form parameter
            if (displayUserName != null) localVarFormParams.Add("display_user_name", Configuration.ApiClient.ParameterToString(displayUserName)); // form parameter
            if (displayUserEmail != null) localVarFormParams.Add("display_user_email", Configuration.ApiClient.ParameterToString(displayUserEmail)); // form parameter
            if (displayIpAddress != null) localVarFormParams.Add("display_ip_address", Configuration.ApiClient.ParameterToString(displayIpAddress)); // form parameter
            if (displayTime != null) localVarFormParams.Add("display_time", Configuration.ApiClient.ParameterToString(displayTime)); // form parameter
            if (displayWorkspaceName != null) localVarFormParams.Add("display_workspace_name", Configuration.ApiClient.ParameterToString(displayWorkspaceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWatermarkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomWatermarkSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomWatermarkSetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomWatermarkSetting)));
        }

    }
}
