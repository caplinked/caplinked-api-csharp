/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Caplinked.Client;
using Caplinked.Model;

namespace Caplinked.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkspacesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all workspaces for a team
        /// </summary>
        /// <remarks>
        /// List all workspaces for a team
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of team from which to list workspaces</param>
        /// <returns>Workspace</returns>
        Workspace GetWorkspaces (int? teamId);

        /// <summary>
        /// List all workspaces for a team
        /// </summary>
        /// <remarks>
        /// List all workspaces for a team
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of team from which to list workspaces</param>
        /// <returns>ApiResponse of Workspace</returns>
        ApiResponse<Workspace> GetWorkspacesWithHttpInfo (int? teamId);
        /// <summary>
        /// Get workspace information
        /// </summary>
        /// <remarks>
        /// Get workspace information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace</param>
        /// <returns>Workspace</returns>
        Workspace GetWorkspacesId (int? id);

        /// <summary>
        /// Get workspace information
        /// </summary>
        /// <remarks>
        /// Get workspace information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace</param>
        /// <returns>ApiResponse of Workspace</returns>
        ApiResponse<Workspace> GetWorkspacesIdWithHttpInfo (int? id);
        /// <summary>
        /// Create workspace
        /// </summary>
        /// <remarks>
        /// Create workspace. Workspace creator will be added to Workspace Admins group.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of parent team for this workspace</param>
        /// <param name="workspaceName">Name of workspace to create</param>
        /// <returns>Workspace</returns>
        Workspace PostWorkspaces (int? teamId, string workspaceName);

        /// <summary>
        /// Create workspace
        /// </summary>
        /// <remarks>
        /// Create workspace. Workspace creator will be added to Workspace Admins group.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of parent team for this workspace</param>
        /// <param name="workspaceName">Name of workspace to create</param>
        /// <returns>ApiResponse of Workspace</returns>
        ApiResponse<Workspace> PostWorkspacesWithHttpInfo (int? teamId, string workspaceName);
        /// <summary>
        /// Update workspace
        /// </summary>
        /// <remarks>
        /// Update workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace to update</param>
        /// <param name="workspaceName">Name of workspace to update (optional)</param>
        /// <returns>Workspace</returns>
        Workspace PutWorkspacesId (int? id, string workspaceName = null);

        /// <summary>
        /// Update workspace
        /// </summary>
        /// <remarks>
        /// Update workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace to update</param>
        /// <param name="workspaceName">Name of workspace to update (optional)</param>
        /// <returns>ApiResponse of Workspace</returns>
        ApiResponse<Workspace> PutWorkspacesIdWithHttpInfo (int? id, string workspaceName = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List all workspaces for a team
        /// </summary>
        /// <remarks>
        /// List all workspaces for a team
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of team from which to list workspaces</param>
        /// <returns>Task of Workspace</returns>
        System.Threading.Tasks.Task<Workspace> GetWorkspacesAsync (int? teamId);

        /// <summary>
        /// List all workspaces for a team
        /// </summary>
        /// <remarks>
        /// List all workspaces for a team
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of team from which to list workspaces</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workspace>> GetWorkspacesAsyncWithHttpInfo (int? teamId);
        /// <summary>
        /// Get workspace information
        /// </summary>
        /// <remarks>
        /// Get workspace information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace</param>
        /// <returns>Task of Workspace</returns>
        System.Threading.Tasks.Task<Workspace> GetWorkspacesIdAsync (int? id);

        /// <summary>
        /// Get workspace information
        /// </summary>
        /// <remarks>
        /// Get workspace information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workspace>> GetWorkspacesIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Create workspace
        /// </summary>
        /// <remarks>
        /// Create workspace. Workspace creator will be added to Workspace Admins group.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of parent team for this workspace</param>
        /// <param name="workspaceName">Name of workspace to create</param>
        /// <returns>Task of Workspace</returns>
        System.Threading.Tasks.Task<Workspace> PostWorkspacesAsync (int? teamId, string workspaceName);

        /// <summary>
        /// Create workspace
        /// </summary>
        /// <remarks>
        /// Create workspace. Workspace creator will be added to Workspace Admins group.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of parent team for this workspace</param>
        /// <param name="workspaceName">Name of workspace to create</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workspace>> PostWorkspacesAsyncWithHttpInfo (int? teamId, string workspaceName);
        /// <summary>
        /// Update workspace
        /// </summary>
        /// <remarks>
        /// Update workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace to update</param>
        /// <param name="workspaceName">Name of workspace to update (optional)</param>
        /// <returns>Task of Workspace</returns>
        System.Threading.Tasks.Task<Workspace> PutWorkspacesIdAsync (int? id, string workspaceName = null);

        /// <summary>
        /// Update workspace
        /// </summary>
        /// <remarks>
        /// Update workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace to update</param>
        /// <param name="workspaceName">Name of workspace to update (optional)</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workspace>> PutWorkspacesIdAsyncWithHttpInfo (int? id, string workspaceName = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkspacesApi : IWorkspacesApi
    {
        private Caplinked.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspacesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkspacesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Caplinked.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List all workspaces for a team List all workspaces for a team
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of team from which to list workspaces</param>
        /// <returns>Workspace</returns>
        public Workspace GetWorkspaces (int? teamId)
        {
             ApiResponse<Workspace> localVarResponse = GetWorkspacesWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all workspaces for a team List all workspaces for a team
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of team from which to list workspaces</param>
        /// <returns>ApiResponse of Workspace</returns>
        public ApiResponse< Workspace > GetWorkspacesWithHttpInfo (int? teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling WorkspacesApi->GetWorkspaces");

            var localVarPath = "/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarQueryParams.Add("team_id", Configuration.ApiClient.ParameterToString(teamId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workspace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workspace)));
        }

        /// <summary>
        /// List all workspaces for a team List all workspaces for a team
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of team from which to list workspaces</param>
        /// <returns>Task of Workspace</returns>
        public async System.Threading.Tasks.Task<Workspace> GetWorkspacesAsync (int? teamId)
        {
             ApiResponse<Workspace> localVarResponse = await GetWorkspacesAsyncWithHttpInfo(teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all workspaces for a team List all workspaces for a team
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of team from which to list workspaces</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workspace>> GetWorkspacesAsyncWithHttpInfo (int? teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling WorkspacesApi->GetWorkspaces");

            var localVarPath = "/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarQueryParams.Add("team_id", Configuration.ApiClient.ParameterToString(teamId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workspace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workspace)));
        }

        /// <summary>
        /// Get workspace information Get workspace information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace</param>
        /// <returns>Workspace</returns>
        public Workspace GetWorkspacesId (int? id)
        {
             ApiResponse<Workspace> localVarResponse = GetWorkspacesIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace information Get workspace information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace</param>
        /// <returns>ApiResponse of Workspace</returns>
        public ApiResponse< Workspace > GetWorkspacesIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkspacesApi->GetWorkspacesId");

            var localVarPath = "/workspaces/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workspace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workspace)));
        }

        /// <summary>
        /// Get workspace information Get workspace information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace</param>
        /// <returns>Task of Workspace</returns>
        public async System.Threading.Tasks.Task<Workspace> GetWorkspacesIdAsync (int? id)
        {
             ApiResponse<Workspace> localVarResponse = await GetWorkspacesIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace information Get workspace information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workspace>> GetWorkspacesIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkspacesApi->GetWorkspacesId");

            var localVarPath = "/workspaces/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workspace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workspace)));
        }

        /// <summary>
        /// Create workspace Create workspace. Workspace creator will be added to Workspace Admins group.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of parent team for this workspace</param>
        /// <param name="workspaceName">Name of workspace to create</param>
        /// <returns>Workspace</returns>
        public Workspace PostWorkspaces (int? teamId, string workspaceName)
        {
             ApiResponse<Workspace> localVarResponse = PostWorkspacesWithHttpInfo(teamId, workspaceName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create workspace Create workspace. Workspace creator will be added to Workspace Admins group.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of parent team for this workspace</param>
        /// <param name="workspaceName">Name of workspace to create</param>
        /// <returns>ApiResponse of Workspace</returns>
        public ApiResponse< Workspace > PostWorkspacesWithHttpInfo (int? teamId, string workspaceName)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling WorkspacesApi->PostWorkspaces");
            // verify the required parameter 'workspaceName' is set
            if (workspaceName == null)
                throw new ApiException(400, "Missing required parameter 'workspaceName' when calling WorkspacesApi->PostWorkspaces");

            var localVarPath = "/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarFormParams.Add("team_id", Configuration.ApiClient.ParameterToString(teamId)); // form parameter
            if (workspaceName != null) localVarFormParams.Add("workspace[name]", Configuration.ApiClient.ParameterToString(workspaceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workspace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workspace)));
        }

        /// <summary>
        /// Create workspace Create workspace. Workspace creator will be added to Workspace Admins group.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of parent team for this workspace</param>
        /// <param name="workspaceName">Name of workspace to create</param>
        /// <returns>Task of Workspace</returns>
        public async System.Threading.Tasks.Task<Workspace> PostWorkspacesAsync (int? teamId, string workspaceName)
        {
             ApiResponse<Workspace> localVarResponse = await PostWorkspacesAsyncWithHttpInfo(teamId, workspaceName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create workspace Create workspace. Workspace creator will be added to Workspace Admins group.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">ID of parent team for this workspace</param>
        /// <param name="workspaceName">Name of workspace to create</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workspace>> PostWorkspacesAsyncWithHttpInfo (int? teamId, string workspaceName)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling WorkspacesApi->PostWorkspaces");
            // verify the required parameter 'workspaceName' is set
            if (workspaceName == null)
                throw new ApiException(400, "Missing required parameter 'workspaceName' when calling WorkspacesApi->PostWorkspaces");

            var localVarPath = "/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarFormParams.Add("team_id", Configuration.ApiClient.ParameterToString(teamId)); // form parameter
            if (workspaceName != null) localVarFormParams.Add("workspace[name]", Configuration.ApiClient.ParameterToString(workspaceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workspace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workspace)));
        }

        /// <summary>
        /// Update workspace Update workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace to update</param>
        /// <param name="workspaceName">Name of workspace to update (optional)</param>
        /// <returns>Workspace</returns>
        public Workspace PutWorkspacesId (int? id, string workspaceName = null)
        {
             ApiResponse<Workspace> localVarResponse = PutWorkspacesIdWithHttpInfo(id, workspaceName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update workspace Update workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace to update</param>
        /// <param name="workspaceName">Name of workspace to update (optional)</param>
        /// <returns>ApiResponse of Workspace</returns>
        public ApiResponse< Workspace > PutWorkspacesIdWithHttpInfo (int? id, string workspaceName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkspacesApi->PutWorkspacesId");

            var localVarPath = "/workspaces/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceName != null) localVarFormParams.Add("workspace[name]", Configuration.ApiClient.ParameterToString(workspaceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspacesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workspace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workspace)));
        }

        /// <summary>
        /// Update workspace Update workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace to update</param>
        /// <param name="workspaceName">Name of workspace to update (optional)</param>
        /// <returns>Task of Workspace</returns>
        public async System.Threading.Tasks.Task<Workspace> PutWorkspacesIdAsync (int? id, string workspaceName = null)
        {
             ApiResponse<Workspace> localVarResponse = await PutWorkspacesIdAsyncWithHttpInfo(id, workspaceName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update workspace Update workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of workspace to update</param>
        /// <param name="workspaceName">Name of workspace to update (optional)</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workspace>> PutWorkspacesIdAsyncWithHttpInfo (int? id, string workspaceName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkspacesApi->PutWorkspacesId");

            var localVarPath = "/workspaces/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceName != null) localVarFormParams.Add("workspace[name]", Configuration.ApiClient.ParameterToString(workspaceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspacesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workspace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workspace)));
        }

    }
}
