/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Caplinked.Client;
using Caplinked.Model;

namespace Caplinked.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove organization admin membership
        /// </summary>
        /// <remarks>
        /// Remove organization admin membership
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be removed as an organization admin</param>
        /// <returns></returns>
        void DeleteOrganizationMemberships (int? userId);

        /// <summary>
        /// Remove organization admin membership
        /// </summary>
        /// <remarks>
        /// Remove organization admin membership
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be removed as an organization admin</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrganizationMembershipsWithHttpInfo (int? userId);
        /// <summary>
        /// Get organization information
        /// </summary>
        /// <remarks>
        /// Get organization information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Organization</returns>
        Organization GetOrganization ();

        /// <summary>
        /// Get organization information
        /// </summary>
        /// <remarks>
        /// Get organization information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> GetOrganizationWithHttpInfo ();
        /// <summary>
        /// Show all organization members
        /// </summary>
        /// <remarks>
        /// Show all organization members
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        User GetOrganizationMemberships ();

        /// <summary>
        /// Show all organization members
        /// </summary>
        /// <remarks>
        /// Show all organization members
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetOrganizationMembershipsWithHttpInfo ();
        /// <summary>
        /// Add organization admin membership
        /// </summary>
        /// <remarks>
        /// Add organization admin membership
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be added as an organization admin</param>
        /// <returns>OrganizationMembership</returns>
        OrganizationMembership PostOrganizationMemberships (int? userId);

        /// <summary>
        /// Add organization admin membership
        /// </summary>
        /// <remarks>
        /// Add organization admin membership
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be added as an organization admin</param>
        /// <returns>ApiResponse of OrganizationMembership</returns>
        ApiResponse<OrganizationMembership> PostOrganizationMembershipsWithHttpInfo (int? userId);
        /// <summary>
        /// Update organization information
        /// </summary>
        /// <remarks>
        /// Update organization information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the organization to update (optional)</param>
        /// <param name="description">Description of the organization to update (optional)</param>
        /// <param name="location">Location of the organization to update (optional)</param>
        /// <param name="billingEmail">Billing email address of the organization to update (optional)</param>
        /// <param name="url">Website of the organization to update (optional)</param>
        /// <returns>Organization</returns>
        Organization PutOrganization (string name = null, string description = null, string location = null, string billingEmail = null, string url = null);

        /// <summary>
        /// Update organization information
        /// </summary>
        /// <remarks>
        /// Update organization information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the organization to update (optional)</param>
        /// <param name="description">Description of the organization to update (optional)</param>
        /// <param name="location">Location of the organization to update (optional)</param>
        /// <param name="billingEmail">Billing email address of the organization to update (optional)</param>
        /// <param name="url">Website of the organization to update (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> PutOrganizationWithHttpInfo (string name = null, string description = null, string location = null, string billingEmail = null, string url = null);
        /// <summary>
        /// Update support information of organization
        /// </summary>
        /// <remarks>
        /// Update support information of organization
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Support phone number of the organization to update (optional)</param>
        /// <param name="email">Support email of the organization to update (optional)</param>
        /// <param name="website">Support website of the organization to update (optional)</param>
        /// <returns>SupportInformation</returns>
        SupportInformation PutOrganizationSupportInformation (string phoneNumber = null, string email = null, string website = null);

        /// <summary>
        /// Update support information of organization
        /// </summary>
        /// <remarks>
        /// Update support information of organization
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Support phone number of the organization to update (optional)</param>
        /// <param name="email">Support email of the organization to update (optional)</param>
        /// <param name="website">Support website of the organization to update (optional)</param>
        /// <returns>ApiResponse of SupportInformation</returns>
        ApiResponse<SupportInformation> PutOrganizationSupportInformationWithHttpInfo (string phoneNumber = null, string email = null, string website = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Remove organization admin membership
        /// </summary>
        /// <remarks>
        /// Remove organization admin membership
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be removed as an organization admin</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrganizationMembershipsAsync (int? userId);

        /// <summary>
        /// Remove organization admin membership
        /// </summary>
        /// <remarks>
        /// Remove organization admin membership
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be removed as an organization admin</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationMembershipsAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Get organization information
        /// </summary>
        /// <remarks>
        /// Get organization information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> GetOrganizationAsync ();

        /// <summary>
        /// Get organization information
        /// </summary>
        /// <remarks>
        /// Get organization information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrganizationAsyncWithHttpInfo ();
        /// <summary>
        /// Show all organization members
        /// </summary>
        /// <remarks>
        /// Show all organization members
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetOrganizationMembershipsAsync ();

        /// <summary>
        /// Show all organization members
        /// </summary>
        /// <remarks>
        /// Show all organization members
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetOrganizationMembershipsAsyncWithHttpInfo ();
        /// <summary>
        /// Add organization admin membership
        /// </summary>
        /// <remarks>
        /// Add organization admin membership
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be added as an organization admin</param>
        /// <returns>Task of OrganizationMembership</returns>
        System.Threading.Tasks.Task<OrganizationMembership> PostOrganizationMembershipsAsync (int? userId);

        /// <summary>
        /// Add organization admin membership
        /// </summary>
        /// <remarks>
        /// Add organization admin membership
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be added as an organization admin</param>
        /// <returns>Task of ApiResponse (OrganizationMembership)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMembership>> PostOrganizationMembershipsAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Update organization information
        /// </summary>
        /// <remarks>
        /// Update organization information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the organization to update (optional)</param>
        /// <param name="description">Description of the organization to update (optional)</param>
        /// <param name="location">Location of the organization to update (optional)</param>
        /// <param name="billingEmail">Billing email address of the organization to update (optional)</param>
        /// <param name="url">Website of the organization to update (optional)</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> PutOrganizationAsync (string name = null, string description = null, string location = null, string billingEmail = null, string url = null);

        /// <summary>
        /// Update organization information
        /// </summary>
        /// <remarks>
        /// Update organization information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the organization to update (optional)</param>
        /// <param name="description">Description of the organization to update (optional)</param>
        /// <param name="location">Location of the organization to update (optional)</param>
        /// <param name="billingEmail">Billing email address of the organization to update (optional)</param>
        /// <param name="url">Website of the organization to update (optional)</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> PutOrganizationAsyncWithHttpInfo (string name = null, string description = null, string location = null, string billingEmail = null, string url = null);
        /// <summary>
        /// Update support information of organization
        /// </summary>
        /// <remarks>
        /// Update support information of organization
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Support phone number of the organization to update (optional)</param>
        /// <param name="email">Support email of the organization to update (optional)</param>
        /// <param name="website">Support website of the organization to update (optional)</param>
        /// <returns>Task of SupportInformation</returns>
        System.Threading.Tasks.Task<SupportInformation> PutOrganizationSupportInformationAsync (string phoneNumber = null, string email = null, string website = null);

        /// <summary>
        /// Update support information of organization
        /// </summary>
        /// <remarks>
        /// Update support information of organization
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Support phone number of the organization to update (optional)</param>
        /// <param name="email">Support email of the organization to update (optional)</param>
        /// <param name="website">Support website of the organization to update (optional)</param>
        /// <returns>Task of ApiResponse (SupportInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupportInformation>> PutOrganizationSupportInformationAsyncWithHttpInfo (string phoneNumber = null, string email = null, string website = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationApi : IOrganizationApi
    {
        private Caplinked.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Caplinked.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Remove organization admin membership Remove organization admin membership
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be removed as an organization admin</param>
        /// <returns></returns>
        public void DeleteOrganizationMemberships (int? userId)
        {
             DeleteOrganizationMembershipsWithHttpInfo(userId);
        }

        /// <summary>
        /// Remove organization admin membership Remove organization admin membership
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be removed as an organization admin</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrganizationMembershipsWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationApi->DeleteOrganizationMemberships");

            var localVarPath = "/organization/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove organization admin membership Remove organization admin membership
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be removed as an organization admin</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrganizationMembershipsAsync (int? userId)
        {
             await DeleteOrganizationMembershipsAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Remove organization admin membership Remove organization admin membership
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be removed as an organization admin</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationMembershipsAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationApi->DeleteOrganizationMemberships");

            var localVarPath = "/organization/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get organization information Get organization information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Organization</returns>
        public Organization GetOrganization ()
        {
             ApiResponse<Organization> localVarResponse = GetOrganizationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get organization information Get organization information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Organization</returns>
        public ApiResponse< Organization > GetOrganizationWithHttpInfo ()
        {

            var localVarPath = "/organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// Get organization information Get organization information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> GetOrganizationAsync ()
        {
             ApiResponse<Organization> localVarResponse = await GetOrganizationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get organization information Get organization information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrganizationAsyncWithHttpInfo ()
        {

            var localVarPath = "/organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// Show all organization members Show all organization members
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        public User GetOrganizationMemberships ()
        {
             ApiResponse<User> localVarResponse = GetOrganizationMembershipsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show all organization members Show all organization members
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetOrganizationMembershipsWithHttpInfo ()
        {

            var localVarPath = "/organization/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Show all organization members Show all organization members
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetOrganizationMembershipsAsync ()
        {
             ApiResponse<User> localVarResponse = await GetOrganizationMembershipsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show all organization members Show all organization members
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetOrganizationMembershipsAsyncWithHttpInfo ()
        {

            var localVarPath = "/organization/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Add organization admin membership Add organization admin membership
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be added as an organization admin</param>
        /// <returns>OrganizationMembership</returns>
        public OrganizationMembership PostOrganizationMemberships (int? userId)
        {
             ApiResponse<OrganizationMembership> localVarResponse = PostOrganizationMembershipsWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add organization admin membership Add organization admin membership
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be added as an organization admin</param>
        /// <returns>ApiResponse of OrganizationMembership</returns>
        public ApiResponse< OrganizationMembership > PostOrganizationMembershipsWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationApi->PostOrganizationMemberships");

            var localVarPath = "/organization/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarFormParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMembership>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMembership) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMembership)));
        }

        /// <summary>
        /// Add organization admin membership Add organization admin membership
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be added as an organization admin</param>
        /// <returns>Task of OrganizationMembership</returns>
        public async System.Threading.Tasks.Task<OrganizationMembership> PostOrganizationMembershipsAsync (int? userId)
        {
             ApiResponse<OrganizationMembership> localVarResponse = await PostOrganizationMembershipsAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add organization admin membership Add organization admin membership
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to be added as an organization admin</param>
        /// <returns>Task of ApiResponse (OrganizationMembership)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMembership>> PostOrganizationMembershipsAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationApi->PostOrganizationMemberships");

            var localVarPath = "/organization/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarFormParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMembership>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMembership) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMembership)));
        }

        /// <summary>
        /// Update organization information Update organization information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the organization to update (optional)</param>
        /// <param name="description">Description of the organization to update (optional)</param>
        /// <param name="location">Location of the organization to update (optional)</param>
        /// <param name="billingEmail">Billing email address of the organization to update (optional)</param>
        /// <param name="url">Website of the organization to update (optional)</param>
        /// <returns>Organization</returns>
        public Organization PutOrganization (string name = null, string description = null, string location = null, string billingEmail = null, string url = null)
        {
             ApiResponse<Organization> localVarResponse = PutOrganizationWithHttpInfo(name, description, location, billingEmail, url);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update organization information Update organization information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the organization to update (optional)</param>
        /// <param name="description">Description of the organization to update (optional)</param>
        /// <param name="location">Location of the organization to update (optional)</param>
        /// <param name="billingEmail">Billing email address of the organization to update (optional)</param>
        /// <param name="url">Website of the organization to update (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        public ApiResponse< Organization > PutOrganizationWithHttpInfo (string name = null, string description = null, string location = null, string billingEmail = null, string url = null)
        {

            var localVarPath = "/organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (location != null) localVarFormParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (billingEmail != null) localVarFormParams.Add("billing_email", Configuration.ApiClient.ParameterToString(billingEmail)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// Update organization information Update organization information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the organization to update (optional)</param>
        /// <param name="description">Description of the organization to update (optional)</param>
        /// <param name="location">Location of the organization to update (optional)</param>
        /// <param name="billingEmail">Billing email address of the organization to update (optional)</param>
        /// <param name="url">Website of the organization to update (optional)</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> PutOrganizationAsync (string name = null, string description = null, string location = null, string billingEmail = null, string url = null)
        {
             ApiResponse<Organization> localVarResponse = await PutOrganizationAsyncWithHttpInfo(name, description, location, billingEmail, url);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update organization information Update organization information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the organization to update (optional)</param>
        /// <param name="description">Description of the organization to update (optional)</param>
        /// <param name="location">Location of the organization to update (optional)</param>
        /// <param name="billingEmail">Billing email address of the organization to update (optional)</param>
        /// <param name="url">Website of the organization to update (optional)</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organization>> PutOrganizationAsyncWithHttpInfo (string name = null, string description = null, string location = null, string billingEmail = null, string url = null)
        {

            var localVarPath = "/organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (location != null) localVarFormParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (billingEmail != null) localVarFormParams.Add("billing_email", Configuration.ApiClient.ParameterToString(billingEmail)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// Update support information of organization Update support information of organization
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Support phone number of the organization to update (optional)</param>
        /// <param name="email">Support email of the organization to update (optional)</param>
        /// <param name="website">Support website of the organization to update (optional)</param>
        /// <returns>SupportInformation</returns>
        public SupportInformation PutOrganizationSupportInformation (string phoneNumber = null, string email = null, string website = null)
        {
             ApiResponse<SupportInformation> localVarResponse = PutOrganizationSupportInformationWithHttpInfo(phoneNumber, email, website);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update support information of organization Update support information of organization
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Support phone number of the organization to update (optional)</param>
        /// <param name="email">Support email of the organization to update (optional)</param>
        /// <param name="website">Support website of the organization to update (optional)</param>
        /// <returns>ApiResponse of SupportInformation</returns>
        public ApiResponse< SupportInformation > PutOrganizationSupportInformationWithHttpInfo (string phoneNumber = null, string email = null, string website = null)
        {

            var localVarPath = "/organization/support_information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("phone_number", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (website != null) localVarFormParams.Add("website", Configuration.ApiClient.ParameterToString(website)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationSupportInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SupportInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SupportInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SupportInformation)));
        }

        /// <summary>
        /// Update support information of organization Update support information of organization
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Support phone number of the organization to update (optional)</param>
        /// <param name="email">Support email of the organization to update (optional)</param>
        /// <param name="website">Support website of the organization to update (optional)</param>
        /// <returns>Task of SupportInformation</returns>
        public async System.Threading.Tasks.Task<SupportInformation> PutOrganizationSupportInformationAsync (string phoneNumber = null, string email = null, string website = null)
        {
             ApiResponse<SupportInformation> localVarResponse = await PutOrganizationSupportInformationAsyncWithHttpInfo(phoneNumber, email, website);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update support information of organization Update support information of organization
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Support phone number of the organization to update (optional)</param>
        /// <param name="email">Support email of the organization to update (optional)</param>
        /// <param name="website">Support website of the organization to update (optional)</param>
        /// <returns>Task of ApiResponse (SupportInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SupportInformation>> PutOrganizationSupportInformationAsyncWithHttpInfo (string phoneNumber = null, string email = null, string website = null)
        {

            var localVarPath = "/organization/support_information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("phone_number", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (website != null) localVarFormParams.Add("website", Configuration.ApiClient.ParameterToString(website)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationSupportInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SupportInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SupportInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SupportInformation)));
        }

    }
}
