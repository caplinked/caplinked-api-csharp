/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Caplinked.Client;
using Caplinked.Model;

namespace Caplinked.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove team member
        /// </summary>
        /// <remarks>
        /// Remove team member
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team from which user will be removed</param>
        /// <param name="userId">ID of user to remove</param>
        /// <returns></returns>
        void DeleteTeamsIdMemberships (int? id, int? userId);

        /// <summary>
        /// Remove team member
        /// </summary>
        /// <remarks>
        /// Remove team member
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team from which user will be removed</param>
        /// <param name="userId">ID of user to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTeamsIdMembershipsWithHttpInfo (int? id, int? userId);
        /// <summary>
        /// List all teams in organization
        /// </summary>
        /// <remarks>
        /// List all teams in organization
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Team</returns>
        Team GetTeams ();

        /// <summary>
        /// List all teams in organization
        /// </summary>
        /// <remarks>
        /// List all teams in organization
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> GetTeamsWithHttpInfo ();
        /// <summary>
        /// Get team information
        /// </summary>
        /// <remarks>
        /// Get team information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Team</param>
        /// <returns>Team</returns>
        Team GetTeamsId (int? id);

        /// <summary>
        /// Get team information
        /// </summary>
        /// <remarks>
        /// Get team information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Team</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> GetTeamsIdWithHttpInfo (int? id);
        /// <summary>
        /// Get list of team members
        /// </summary>
        /// <remarks>
        /// Get list of team members
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team for which users will be listed</param>
        /// <returns>List&lt;Membership&gt;</returns>
        List<Membership> GetTeamsIdMemberships (int? id);

        /// <summary>
        /// Get list of team members
        /// </summary>
        /// <remarks>
        /// Get list of team members
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team for which users will be listed</param>
        /// <returns>ApiResponse of List&lt;Membership&gt;</returns>
        ApiResponse<List<Membership>> GetTeamsIdMembershipsWithHttpInfo (int? id);
        /// <summary>
        /// List custom watermarks for a team
        /// </summary>
        /// <remarks>
        /// List custom watermarks for a team
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team</param>
        /// <returns>CustomWatermarkSetting</returns>
        CustomWatermarkSetting GetTeamsIdWatermarkSettings (int? id);

        /// <summary>
        /// List custom watermarks for a team
        /// </summary>
        /// <remarks>
        /// List custom watermarks for a team
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team</param>
        /// <returns>ApiResponse of CustomWatermarkSetting</returns>
        ApiResponse<CustomWatermarkSetting> GetTeamsIdWatermarkSettingsWithHttpInfo (int? id);
        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// Create team. Current user will become team owner.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Name of the team</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional, default to 1)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional, default to 10)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional, default to true)</param>
        /// <returns>Team</returns>
        Team PostTeams (string teamName, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null);

        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// Create team. Current user will become team owner.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Name of the team</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional, default to 1)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional, default to 10)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional, default to true)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> PostTeamsWithHttpInfo (string teamName, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null);
        /// <summary>
        /// Add team member
        /// </summary>
        /// <remarks>
        /// Add team member
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to which user will be added</param>
        /// <param name="userId">ID of user to add</param>
        /// <returns>Membership</returns>
        Membership PostTeamsIdMemberships (int? id, int? userId);

        /// <summary>
        /// Add team member
        /// </summary>
        /// <remarks>
        /// Add team member
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to which user will be added</param>
        /// <param name="userId">ID of user to add</param>
        /// <returns>ApiResponse of Membership</returns>
        ApiResponse<Membership> PostTeamsIdMembershipsWithHttpInfo (int? id, int? userId);
        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update team. Includes option to designate a new Team Owner.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to update</param>
        /// <param name="teamName">Name of the team (optional)</param>
        /// <param name="teamTeamOwnerId">User ID of the team owner (optional)</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional)</param>
        /// <returns>Team</returns>
        Team PutTeamsId (int? id, string teamName = null, int? teamTeamOwnerId = null, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null);

        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update team. Includes option to designate a new Team Owner.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to update</param>
        /// <param name="teamName">Name of the team (optional)</param>
        /// <param name="teamTeamOwnerId">User ID of the team owner (optional)</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> PutTeamsIdWithHttpInfo (int? id, string teamName = null, int? teamTeamOwnerId = null, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Remove team member
        /// </summary>
        /// <remarks>
        /// Remove team member
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team from which user will be removed</param>
        /// <param name="userId">ID of user to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTeamsIdMembershipsAsync (int? id, int? userId);

        /// <summary>
        /// Remove team member
        /// </summary>
        /// <remarks>
        /// Remove team member
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team from which user will be removed</param>
        /// <param name="userId">ID of user to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamsIdMembershipsAsyncWithHttpInfo (int? id, int? userId);
        /// <summary>
        /// List all teams in organization
        /// </summary>
        /// <remarks>
        /// List all teams in organization
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> GetTeamsAsync ();

        /// <summary>
        /// List all teams in organization
        /// </summary>
        /// <remarks>
        /// List all teams in organization
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamsAsyncWithHttpInfo ();
        /// <summary>
        /// Get team information
        /// </summary>
        /// <remarks>
        /// Get team information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Team</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> GetTeamsIdAsync (int? id);

        /// <summary>
        /// Get team information
        /// </summary>
        /// <remarks>
        /// Get team information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Team</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamsIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get list of team members
        /// </summary>
        /// <remarks>
        /// Get list of team members
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team for which users will be listed</param>
        /// <returns>Task of List&lt;Membership&gt;</returns>
        System.Threading.Tasks.Task<List<Membership>> GetTeamsIdMembershipsAsync (int? id);

        /// <summary>
        /// Get list of team members
        /// </summary>
        /// <remarks>
        /// Get list of team members
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team for which users will be listed</param>
        /// <returns>Task of ApiResponse (List&lt;Membership&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Membership>>> GetTeamsIdMembershipsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// List custom watermarks for a team
        /// </summary>
        /// <remarks>
        /// List custom watermarks for a team
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team</param>
        /// <returns>Task of CustomWatermarkSetting</returns>
        System.Threading.Tasks.Task<CustomWatermarkSetting> GetTeamsIdWatermarkSettingsAsync (int? id);

        /// <summary>
        /// List custom watermarks for a team
        /// </summary>
        /// <remarks>
        /// List custom watermarks for a team
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team</param>
        /// <returns>Task of ApiResponse (CustomWatermarkSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomWatermarkSetting>> GetTeamsIdWatermarkSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// Create team. Current user will become team owner.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Name of the team</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional, default to 1)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional, default to 10)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional, default to true)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> PostTeamsAsync (string teamName, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null);

        /// <summary>
        /// Create team
        /// </summary>
        /// <remarks>
        /// Create team. Current user will become team owner.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Name of the team</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional, default to 1)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional, default to 10)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> PostTeamsAsyncWithHttpInfo (string teamName, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null);
        /// <summary>
        /// Add team member
        /// </summary>
        /// <remarks>
        /// Add team member
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to which user will be added</param>
        /// <param name="userId">ID of user to add</param>
        /// <returns>Task of Membership</returns>
        System.Threading.Tasks.Task<Membership> PostTeamsIdMembershipsAsync (int? id, int? userId);

        /// <summary>
        /// Add team member
        /// </summary>
        /// <remarks>
        /// Add team member
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to which user will be added</param>
        /// <param name="userId">ID of user to add</param>
        /// <returns>Task of ApiResponse (Membership)</returns>
        System.Threading.Tasks.Task<ApiResponse<Membership>> PostTeamsIdMembershipsAsyncWithHttpInfo (int? id, int? userId);
        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update team. Includes option to designate a new Team Owner.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to update</param>
        /// <param name="teamName">Name of the team (optional)</param>
        /// <param name="teamTeamOwnerId">User ID of the team owner (optional)</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> PutTeamsIdAsync (int? id, string teamName = null, int? teamTeamOwnerId = null, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null);

        /// <summary>
        /// Update team
        /// </summary>
        /// <remarks>
        /// Update team. Includes option to designate a new Team Owner.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to update</param>
        /// <param name="teamName">Name of the team (optional)</param>
        /// <param name="teamTeamOwnerId">User ID of the team owner (optional)</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> PutTeamsIdAsyncWithHttpInfo (int? id, string teamName = null, int? teamTeamOwnerId = null, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private Caplinked.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Caplinked.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Remove team member Remove team member
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team from which user will be removed</param>
        /// <param name="userId">ID of user to remove</param>
        /// <returns></returns>
        public void DeleteTeamsIdMemberships (int? id, int? userId)
        {
             DeleteTeamsIdMembershipsWithHttpInfo(id, userId);
        }

        /// <summary>
        /// Remove team member Remove team member
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team from which user will be removed</param>
        /// <param name="userId">ID of user to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTeamsIdMembershipsWithHttpInfo (int? id, int? userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->DeleteTeamsIdMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->DeleteTeamsIdMemberships");

            var localVarPath = "/teams/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeamsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove team member Remove team member
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team from which user will be removed</param>
        /// <param name="userId">ID of user to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTeamsIdMembershipsAsync (int? id, int? userId)
        {
             await DeleteTeamsIdMembershipsAsyncWithHttpInfo(id, userId);

        }

        /// <summary>
        /// Remove team member Remove team member
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team from which user will be removed</param>
        /// <param name="userId">ID of user to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamsIdMembershipsAsyncWithHttpInfo (int? id, int? userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->DeleteTeamsIdMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->DeleteTeamsIdMemberships");

            var localVarPath = "/teams/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeamsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all teams in organization List all teams in organization
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Team</returns>
        public Team GetTeams ()
        {
             ApiResponse<Team> localVarResponse = GetTeamsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all teams in organization List all teams in organization
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > GetTeamsWithHttpInfo ()
        {

            var localVarPath = "/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// List all teams in organization List all teams in organization
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> GetTeamsAsync ()
        {
             ApiResponse<Team> localVarResponse = await GetTeamsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all teams in organization List all teams in organization
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamsAsyncWithHttpInfo ()
        {

            var localVarPath = "/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Get team information Get team information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Team</param>
        /// <returns>Team</returns>
        public Team GetTeamsId (int? id)
        {
             ApiResponse<Team> localVarResponse = GetTeamsIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get team information Get team information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Team</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > GetTeamsIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeamsId");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Get team information Get team information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Team</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> GetTeamsIdAsync (int? id)
        {
             ApiResponse<Team> localVarResponse = await GetTeamsIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get team information Get team information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Team</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamsIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeamsId");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Get list of team members Get list of team members
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team for which users will be listed</param>
        /// <returns>List&lt;Membership&gt;</returns>
        public List<Membership> GetTeamsIdMemberships (int? id)
        {
             ApiResponse<List<Membership>> localVarResponse = GetTeamsIdMembershipsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of team members Get list of team members
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team for which users will be listed</param>
        /// <returns>ApiResponse of List&lt;Membership&gt;</returns>
        public ApiResponse< List<Membership> > GetTeamsIdMembershipsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeamsIdMemberships");

            var localVarPath = "/teams/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Membership>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Membership>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Membership>)));
        }

        /// <summary>
        /// Get list of team members Get list of team members
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team for which users will be listed</param>
        /// <returns>Task of List&lt;Membership&gt;</returns>
        public async System.Threading.Tasks.Task<List<Membership>> GetTeamsIdMembershipsAsync (int? id)
        {
             ApiResponse<List<Membership>> localVarResponse = await GetTeamsIdMembershipsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of team members Get list of team members
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team for which users will be listed</param>
        /// <returns>Task of ApiResponse (List&lt;Membership&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Membership>>> GetTeamsIdMembershipsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeamsIdMemberships");

            var localVarPath = "/teams/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Membership>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Membership>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Membership>)));
        }

        /// <summary>
        /// List custom watermarks for a team List custom watermarks for a team
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team</param>
        /// <returns>CustomWatermarkSetting</returns>
        public CustomWatermarkSetting GetTeamsIdWatermarkSettings (int? id)
        {
             ApiResponse<CustomWatermarkSetting> localVarResponse = GetTeamsIdWatermarkSettingsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List custom watermarks for a team List custom watermarks for a team
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team</param>
        /// <returns>ApiResponse of CustomWatermarkSetting</returns>
        public ApiResponse< CustomWatermarkSetting > GetTeamsIdWatermarkSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeamsIdWatermarkSettings");

            var localVarPath = "/teams/{id}/watermark_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamsIdWatermarkSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomWatermarkSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomWatermarkSetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomWatermarkSetting)));
        }

        /// <summary>
        /// List custom watermarks for a team List custom watermarks for a team
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team</param>
        /// <returns>Task of CustomWatermarkSetting</returns>
        public async System.Threading.Tasks.Task<CustomWatermarkSetting> GetTeamsIdWatermarkSettingsAsync (int? id)
        {
             ApiResponse<CustomWatermarkSetting> localVarResponse = await GetTeamsIdWatermarkSettingsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List custom watermarks for a team List custom watermarks for a team
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team</param>
        /// <returns>Task of ApiResponse (CustomWatermarkSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomWatermarkSetting>> GetTeamsIdWatermarkSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->GetTeamsIdWatermarkSettings");

            var localVarPath = "/teams/{id}/watermark_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamsIdWatermarkSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomWatermarkSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomWatermarkSetting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomWatermarkSetting)));
        }

        /// <summary>
        /// Create team Create team. Current user will become team owner.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Name of the team</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional, default to 1)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional, default to 10)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional, default to true)</param>
        /// <returns>Team</returns>
        public Team PostTeams (string teamName, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null)
        {
             ApiResponse<Team> localVarResponse = PostTeamsWithHttpInfo(teamName, teamAllowedWorkspaces, teamAllowedAdmins, teamDrmEnabled, teamWatermarking, teamSuppressEmails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create team Create team. Current user will become team owner.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Name of the team</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional, default to 1)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional, default to 10)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional, default to true)</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > PostTeamsWithHttpInfo (string teamName, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null)
        {
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling TeamsApi->PostTeams");

            var localVarPath = "/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamName != null) localVarFormParams.Add("team[name]", Configuration.ApiClient.ParameterToString(teamName)); // form parameter
            if (teamAllowedWorkspaces != null) localVarFormParams.Add("team[allowed_workspaces]", Configuration.ApiClient.ParameterToString(teamAllowedWorkspaces)); // form parameter
            if (teamAllowedAdmins != null) localVarFormParams.Add("team[allowed_admins]", Configuration.ApiClient.ParameterToString(teamAllowedAdmins)); // form parameter
            if (teamDrmEnabled != null) localVarFormParams.Add("team[drm_enabled]", Configuration.ApiClient.ParameterToString(teamDrmEnabled)); // form parameter
            if (teamWatermarking != null) localVarFormParams.Add("team[watermarking]", Configuration.ApiClient.ParameterToString(teamWatermarking)); // form parameter
            if (teamSuppressEmails != null) localVarFormParams.Add("team[suppress_emails]", Configuration.ApiClient.ParameterToString(teamSuppressEmails)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Create team Create team. Current user will become team owner.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Name of the team</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional, default to 1)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional, default to 10)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional, default to true)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> PostTeamsAsync (string teamName, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null)
        {
             ApiResponse<Team> localVarResponse = await PostTeamsAsyncWithHttpInfo(teamName, teamAllowedWorkspaces, teamAllowedAdmins, teamDrmEnabled, teamWatermarking, teamSuppressEmails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create team Create team. Current user will become team owner.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Name of the team</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional, default to 1)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional, default to 10)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> PostTeamsAsyncWithHttpInfo (string teamName, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null)
        {
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling TeamsApi->PostTeams");

            var localVarPath = "/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamName != null) localVarFormParams.Add("team[name]", Configuration.ApiClient.ParameterToString(teamName)); // form parameter
            if (teamAllowedWorkspaces != null) localVarFormParams.Add("team[allowed_workspaces]", Configuration.ApiClient.ParameterToString(teamAllowedWorkspaces)); // form parameter
            if (teamAllowedAdmins != null) localVarFormParams.Add("team[allowed_admins]", Configuration.ApiClient.ParameterToString(teamAllowedAdmins)); // form parameter
            if (teamDrmEnabled != null) localVarFormParams.Add("team[drm_enabled]", Configuration.ApiClient.ParameterToString(teamDrmEnabled)); // form parameter
            if (teamWatermarking != null) localVarFormParams.Add("team[watermarking]", Configuration.ApiClient.ParameterToString(teamWatermarking)); // form parameter
            if (teamSuppressEmails != null) localVarFormParams.Add("team[suppress_emails]", Configuration.ApiClient.ParameterToString(teamSuppressEmails)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Add team member Add team member
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to which user will be added</param>
        /// <param name="userId">ID of user to add</param>
        /// <returns>Membership</returns>
        public Membership PostTeamsIdMemberships (int? id, int? userId)
        {
             ApiResponse<Membership> localVarResponse = PostTeamsIdMembershipsWithHttpInfo(id, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add team member Add team member
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to which user will be added</param>
        /// <param name="userId">ID of user to add</param>
        /// <returns>ApiResponse of Membership</returns>
        public ApiResponse< Membership > PostTeamsIdMembershipsWithHttpInfo (int? id, int? userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->PostTeamsIdMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->PostTeamsIdMemberships");

            var localVarPath = "/teams/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarFormParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTeamsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Membership>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Membership) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Membership)));
        }

        /// <summary>
        /// Add team member Add team member
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to which user will be added</param>
        /// <param name="userId">ID of user to add</param>
        /// <returns>Task of Membership</returns>
        public async System.Threading.Tasks.Task<Membership> PostTeamsIdMembershipsAsync (int? id, int? userId)
        {
             ApiResponse<Membership> localVarResponse = await PostTeamsIdMembershipsAsyncWithHttpInfo(id, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add team member Add team member
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to which user will be added</param>
        /// <param name="userId">ID of user to add</param>
        /// <returns>Task of ApiResponse (Membership)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Membership>> PostTeamsIdMembershipsAsyncWithHttpInfo (int? id, int? userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->PostTeamsIdMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->PostTeamsIdMemberships");

            var localVarPath = "/teams/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarFormParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTeamsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Membership>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Membership) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Membership)));
        }

        /// <summary>
        /// Update team Update team. Includes option to designate a new Team Owner.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to update</param>
        /// <param name="teamName">Name of the team (optional)</param>
        /// <param name="teamTeamOwnerId">User ID of the team owner (optional)</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional)</param>
        /// <returns>Team</returns>
        public Team PutTeamsId (int? id, string teamName = null, int? teamTeamOwnerId = null, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null)
        {
             ApiResponse<Team> localVarResponse = PutTeamsIdWithHttpInfo(id, teamName, teamTeamOwnerId, teamAllowedWorkspaces, teamAllowedAdmins, teamDrmEnabled, teamWatermarking, teamSuppressEmails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update team Update team. Includes option to designate a new Team Owner.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to update</param>
        /// <param name="teamName">Name of the team (optional)</param>
        /// <param name="teamTeamOwnerId">User ID of the team owner (optional)</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > PutTeamsIdWithHttpInfo (int? id, string teamName = null, int? teamTeamOwnerId = null, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->PutTeamsId");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (teamName != null) localVarFormParams.Add("team[name]", Configuration.ApiClient.ParameterToString(teamName)); // form parameter
            if (teamTeamOwnerId != null) localVarFormParams.Add("team[team_owner_id]", Configuration.ApiClient.ParameterToString(teamTeamOwnerId)); // form parameter
            if (teamAllowedWorkspaces != null) localVarFormParams.Add("team[allowed_workspaces]", Configuration.ApiClient.ParameterToString(teamAllowedWorkspaces)); // form parameter
            if (teamAllowedAdmins != null) localVarFormParams.Add("team[allowed_admins]", Configuration.ApiClient.ParameterToString(teamAllowedAdmins)); // form parameter
            if (teamDrmEnabled != null) localVarFormParams.Add("team[drm_enabled]", Configuration.ApiClient.ParameterToString(teamDrmEnabled)); // form parameter
            if (teamWatermarking != null) localVarFormParams.Add("team[watermarking]", Configuration.ApiClient.ParameterToString(teamWatermarking)); // form parameter
            if (teamSuppressEmails != null) localVarFormParams.Add("team[suppress_emails]", Configuration.ApiClient.ParameterToString(teamSuppressEmails)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTeamsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Update team Update team. Includes option to designate a new Team Owner.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to update</param>
        /// <param name="teamName">Name of the team (optional)</param>
        /// <param name="teamTeamOwnerId">User ID of the team owner (optional)</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> PutTeamsIdAsync (int? id, string teamName = null, int? teamTeamOwnerId = null, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null)
        {
             ApiResponse<Team> localVarResponse = await PutTeamsIdAsyncWithHttpInfo(id, teamName, teamTeamOwnerId, teamAllowedWorkspaces, teamAllowedAdmins, teamDrmEnabled, teamWatermarking, teamSuppressEmails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update team Update team. Includes option to designate a new Team Owner.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of team to update</param>
        /// <param name="teamName">Name of the team (optional)</param>
        /// <param name="teamTeamOwnerId">User ID of the team owner (optional)</param>
        /// <param name="teamAllowedWorkspaces">Maximum workspaces for team (optional)</param>
        /// <param name="teamAllowedAdmins">Maximum number of admins for team (optional)</param>
        /// <param name="teamDrmEnabled">Toggle DRM (feature availability in workspaces) (optional)</param>
        /// <param name="teamWatermarking">Toggle watermarking (feature availability in workspaces) (optional)</param>
        /// <param name="teamSuppressEmails">Toggle email invites (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> PutTeamsIdAsyncWithHttpInfo (int? id, string teamName = null, int? teamTeamOwnerId = null, int? teamAllowedWorkspaces = null, int? teamAllowedAdmins = null, bool? teamDrmEnabled = null, bool? teamWatermarking = null, bool? teamSuppressEmails = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamsApi->PutTeamsId");

            var localVarPath = "/teams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (teamName != null) localVarFormParams.Add("team[name]", Configuration.ApiClient.ParameterToString(teamName)); // form parameter
            if (teamTeamOwnerId != null) localVarFormParams.Add("team[team_owner_id]", Configuration.ApiClient.ParameterToString(teamTeamOwnerId)); // form parameter
            if (teamAllowedWorkspaces != null) localVarFormParams.Add("team[allowed_workspaces]", Configuration.ApiClient.ParameterToString(teamAllowedWorkspaces)); // form parameter
            if (teamAllowedAdmins != null) localVarFormParams.Add("team[allowed_admins]", Configuration.ApiClient.ParameterToString(teamAllowedAdmins)); // form parameter
            if (teamDrmEnabled != null) localVarFormParams.Add("team[drm_enabled]", Configuration.ApiClient.ParameterToString(teamDrmEnabled)); // form parameter
            if (teamWatermarking != null) localVarFormParams.Add("team[watermarking]", Configuration.ApiClient.ParameterToString(teamWatermarking)); // form parameter
            if (teamSuppressEmails != null) localVarFormParams.Add("team[suppress_emails]", Configuration.ApiClient.ParameterToString(teamSuppressEmails)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTeamsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

    }
}
