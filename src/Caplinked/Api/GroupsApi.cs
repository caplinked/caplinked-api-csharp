/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Caplinked.Client;
using Caplinked.Model;

namespace Caplinked.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// Delete group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>GroupInfoDeleted</returns>
        GroupInfoDeleted DeleteGroupsId (int? id, int? workspaceId);

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// Delete group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of GroupInfoDeleted</returns>
        ApiResponse<GroupInfoDeleted> DeleteGroupsIdWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Remove a user from a group
        /// </summary>
        /// <remarks>
        /// Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be removed from</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be removed from this group</param>
        /// <returns></returns>
        void DeleteGroupsIdMemberships (int? id, int? workspaceId, int? userId);

        /// <summary>
        /// Remove a user from a group
        /// </summary>
        /// <remarks>
        /// Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be removed from</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be removed from this group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupsIdMembershipsWithHttpInfo (int? id, int? workspaceId, int? userId);
        /// <summary>
        /// List all groups in workspace
        /// </summary>
        /// <remarks>
        /// List all groups in workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace from which to list groups</param>
        /// <returns>GroupInfo</returns>
        GroupInfo GetGroups (int? workspaceId);

        /// <summary>
        /// List all groups in workspace
        /// </summary>
        /// <remarks>
        /// List all groups in workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace from which to list groups</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> GetGroupsWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Get group information
        /// </summary>
        /// <remarks>
        /// Get group information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>GroupInfo</returns>
        GroupInfo GetGroupsId (int? id, int? workspaceId);

        /// <summary>
        /// Get group information
        /// </summary>
        /// <remarks>
        /// Get group information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> GetGroupsIdWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// List all memberships for a group
        /// </summary>
        /// <remarks>
        /// List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you want to list the members of</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>User</returns>
        User GetGroupsIdMemberships (int? id, int? workspaceId);

        /// <summary>
        /// List all memberships for a group
        /// </summary>
        /// <remarks>
        /// List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you want to list the members of</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetGroupsIdMembershipsWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Create group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of group</param>
        /// <param name="groupWorkspaceId">Workspace ID for the group</param>
        /// <param name="groupFileManagingAbilities">Enable file managing abililies for uploading users (optional)</param>
        /// <returns>GroupInfo</returns>
        GroupInfo PostGroups (string groupName, int? groupWorkspaceId, bool? groupFileManagingAbilities = null);

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Create group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of group</param>
        /// <param name="groupWorkspaceId">Workspace ID for the group</param>
        /// <param name="groupFileManagingAbilities">Enable file managing abililies for uploading users (optional)</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> PostGroupsWithHttpInfo (string groupName, int? groupWorkspaceId, bool? groupFileManagingAbilities = null);
        /// <summary>
        /// Add user to group (adds to parent workspace if they are not already a member)
        /// </summary>
        /// <remarks>
        /// Add user to group (adds to parent workspace if they are not already a member)
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be added to</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be added to this group</param>
        /// <param name="sendEmail">Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)</param>
        /// <returns></returns>
        void PostGroupsIdMemberships (int? id, int? workspaceId, int? userId, bool? sendEmail = null);

        /// <summary>
        /// Add user to group (adds to parent workspace if they are not already a member)
        /// </summary>
        /// <remarks>
        /// Add user to group (adds to parent workspace if they are not already a member)
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be added to</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be added to this group</param>
        /// <param name="sendEmail">Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGroupsIdMembershipsWithHttpInfo (int? id, int? workspaceId, int? userId, bool? sendEmail = null);
        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// Update group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupName">Name of group (optional)</param>
        /// <param name="groupFileManagingAbilities">Ability to delete, rename, and reindex files for uploading users (optional)</param>
        /// <returns>GroupInfo</returns>
        GroupInfo PutGroupsId (int? id, int? workspaceId, string groupName = null, bool? groupFileManagingAbilities = null);

        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// Update group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupName">Name of group (optional)</param>
        /// <param name="groupFileManagingAbilities">Ability to delete, rename, and reindex files for uploading users (optional)</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> PutGroupsIdWithHttpInfo (int? id, int? workspaceId, string groupName = null, bool? groupFileManagingAbilities = null);
        /// <summary>
        /// Disable DRM expiration for group
        /// </summary>
        /// <remarks>
        /// Disable DRM expiration for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>GroupInfo</returns>
        GroupInfo PutGroupsIdDisableDrmExpiration (int? id, int? workspaceId);

        /// <summary>
        /// Disable DRM expiration for group
        /// </summary>
        /// <remarks>
        /// Disable DRM expiration for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> PutGroupsIdDisableDrmExpirationWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Disable access expiration for a group
        /// </summary>
        /// <remarks>
        /// Disable access expiration for a group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>GroupInfo</returns>
        GroupInfo PutGroupsIdDisableExpireAccess (int? id, int? workspaceId);

        /// <summary>
        /// Disable access expiration for a group
        /// </summary>
        /// <remarks>
        /// Disable access expiration for a group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> PutGroupsIdDisableExpireAccessWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Update DRM for group
        /// </summary>
        /// <remarks>
        /// Update DRM for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupDrmEnabled">Enable DRM for group</param>
        /// <param name="groupDrmExpiresAfter">Expire DRM after this date. Format: yyyy-mm-dd (optional)</param>
        /// <returns>GroupInfo</returns>
        GroupInfo PutGroupsIdDrm (int? id, int? workspaceId, string groupDrmEnabled, DateTime? groupDrmExpiresAfter = null);

        /// <summary>
        /// Update DRM for group
        /// </summary>
        /// <remarks>
        /// Update DRM for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupDrmEnabled">Enable DRM for group</param>
        /// <param name="groupDrmExpiresAfter">Expire DRM after this date. Format: yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> PutGroupsIdDrmWithHttpInfo (int? id, int? workspaceId, string groupDrmEnabled, DateTime? groupDrmExpiresAfter = null);
        /// <summary>
        /// Enable access expiration for a group
        /// </summary>
        /// <remarks>
        /// Enable access expiration for a group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupExpireWorkspaceAccessAt">Expire access on the following date. Format: yyyy-mm-dd</param>
        /// <returns>GroupInfo</returns>
        GroupInfo PutGroupsIdEnableExpireAccess (int? id, int? workspaceId, DateTime? groupExpireWorkspaceAccessAt);

        /// <summary>
        /// Enable access expiration for a group
        /// </summary>
        /// <remarks>
        /// Enable access expiration for a group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupExpireWorkspaceAccessAt">Expire access on the following date. Format: yyyy-mm-dd</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> PutGroupsIdEnableExpireAccessWithHttpInfo (int? id, int? workspaceId, DateTime? groupExpireWorkspaceAccessAt);
        /// <summary>
        /// Watermarking for group
        /// </summary>
        /// <remarks>
        /// Watermarking for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupWatermarking">Enable watermarking for group</param>
        /// <returns>GroupInfo</returns>
        GroupInfo PutGroupsIdWatermarking (int? id, int? workspaceId, bool? groupWatermarking);

        /// <summary>
        /// Watermarking for group
        /// </summary>
        /// <remarks>
        /// Watermarking for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupWatermarking">Enable watermarking for group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> PutGroupsIdWatermarkingWithHttpInfo (int? id, int? workspaceId, bool? groupWatermarking);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// Delete group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of GroupInfoDeleted</returns>
        System.Threading.Tasks.Task<GroupInfoDeleted> DeleteGroupsIdAsync (int? id, int? workspaceId);

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// Delete group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (GroupInfoDeleted)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfoDeleted>> DeleteGroupsIdAsyncWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Remove a user from a group
        /// </summary>
        /// <remarks>
        /// Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be removed from</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be removed from this group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupsIdMembershipsAsync (int? id, int? workspaceId, int? userId);

        /// <summary>
        /// Remove a user from a group
        /// </summary>
        /// <remarks>
        /// Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be removed from</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be removed from this group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupsIdMembershipsAsyncWithHttpInfo (int? id, int? workspaceId, int? userId);
        /// <summary>
        /// List all groups in workspace
        /// </summary>
        /// <remarks>
        /// List all groups in workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace from which to list groups</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> GetGroupsAsync (int? workspaceId);

        /// <summary>
        /// List all groups in workspace
        /// </summary>
        /// <remarks>
        /// List all groups in workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace from which to list groups</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> GetGroupsAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Get group information
        /// </summary>
        /// <remarks>
        /// Get group information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> GetGroupsIdAsync (int? id, int? workspaceId);

        /// <summary>
        /// Get group information
        /// </summary>
        /// <remarks>
        /// Get group information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> GetGroupsIdAsyncWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// List all memberships for a group
        /// </summary>
        /// <remarks>
        /// List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you want to list the members of</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetGroupsIdMembershipsAsync (int? id, int? workspaceId);

        /// <summary>
        /// List all memberships for a group
        /// </summary>
        /// <remarks>
        /// List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you want to list the members of</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetGroupsIdMembershipsAsyncWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Create group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of group</param>
        /// <param name="groupWorkspaceId">Workspace ID for the group</param>
        /// <param name="groupFileManagingAbilities">Enable file managing abililies for uploading users (optional)</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> PostGroupsAsync (string groupName, int? groupWorkspaceId, bool? groupFileManagingAbilities = null);

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Create group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of group</param>
        /// <param name="groupWorkspaceId">Workspace ID for the group</param>
        /// <param name="groupFileManagingAbilities">Enable file managing abililies for uploading users (optional)</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PostGroupsAsyncWithHttpInfo (string groupName, int? groupWorkspaceId, bool? groupFileManagingAbilities = null);
        /// <summary>
        /// Add user to group (adds to parent workspace if they are not already a member)
        /// </summary>
        /// <remarks>
        /// Add user to group (adds to parent workspace if they are not already a member)
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be added to</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be added to this group</param>
        /// <param name="sendEmail">Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostGroupsIdMembershipsAsync (int? id, int? workspaceId, int? userId, bool? sendEmail = null);

        /// <summary>
        /// Add user to group (adds to parent workspace if they are not already a member)
        /// </summary>
        /// <remarks>
        /// Add user to group (adds to parent workspace if they are not already a member)
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be added to</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be added to this group</param>
        /// <param name="sendEmail">Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostGroupsIdMembershipsAsyncWithHttpInfo (int? id, int? workspaceId, int? userId, bool? sendEmail = null);
        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// Update group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupName">Name of group (optional)</param>
        /// <param name="groupFileManagingAbilities">Ability to delete, rename, and reindex files for uploading users (optional)</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> PutGroupsIdAsync (int? id, int? workspaceId, string groupName = null, bool? groupFileManagingAbilities = null);

        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// Update group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupName">Name of group (optional)</param>
        /// <param name="groupFileManagingAbilities">Ability to delete, rename, and reindex files for uploading users (optional)</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdAsyncWithHttpInfo (int? id, int? workspaceId, string groupName = null, bool? groupFileManagingAbilities = null);
        /// <summary>
        /// Disable DRM expiration for group
        /// </summary>
        /// <remarks>
        /// Disable DRM expiration for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> PutGroupsIdDisableDrmExpirationAsync (int? id, int? workspaceId);

        /// <summary>
        /// Disable DRM expiration for group
        /// </summary>
        /// <remarks>
        /// Disable DRM expiration for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdDisableDrmExpirationAsyncWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Disable access expiration for a group
        /// </summary>
        /// <remarks>
        /// Disable access expiration for a group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> PutGroupsIdDisableExpireAccessAsync (int? id, int? workspaceId);

        /// <summary>
        /// Disable access expiration for a group
        /// </summary>
        /// <remarks>
        /// Disable access expiration for a group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdDisableExpireAccessAsyncWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Update DRM for group
        /// </summary>
        /// <remarks>
        /// Update DRM for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupDrmEnabled">Enable DRM for group</param>
        /// <param name="groupDrmExpiresAfter">Expire DRM after this date. Format: yyyy-mm-dd (optional)</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> PutGroupsIdDrmAsync (int? id, int? workspaceId, string groupDrmEnabled, DateTime? groupDrmExpiresAfter = null);

        /// <summary>
        /// Update DRM for group
        /// </summary>
        /// <remarks>
        /// Update DRM for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupDrmEnabled">Enable DRM for group</param>
        /// <param name="groupDrmExpiresAfter">Expire DRM after this date. Format: yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdDrmAsyncWithHttpInfo (int? id, int? workspaceId, string groupDrmEnabled, DateTime? groupDrmExpiresAfter = null);
        /// <summary>
        /// Enable access expiration for a group
        /// </summary>
        /// <remarks>
        /// Enable access expiration for a group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupExpireWorkspaceAccessAt">Expire access on the following date. Format: yyyy-mm-dd</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> PutGroupsIdEnableExpireAccessAsync (int? id, int? workspaceId, DateTime? groupExpireWorkspaceAccessAt);

        /// <summary>
        /// Enable access expiration for a group
        /// </summary>
        /// <remarks>
        /// Enable access expiration for a group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupExpireWorkspaceAccessAt">Expire access on the following date. Format: yyyy-mm-dd</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdEnableExpireAccessAsyncWithHttpInfo (int? id, int? workspaceId, DateTime? groupExpireWorkspaceAccessAt);
        /// <summary>
        /// Watermarking for group
        /// </summary>
        /// <remarks>
        /// Watermarking for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupWatermarking">Enable watermarking for group</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> PutGroupsIdWatermarkingAsync (int? id, int? workspaceId, bool? groupWatermarking);

        /// <summary>
        /// Watermarking for group
        /// </summary>
        /// <remarks>
        /// Watermarking for group
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupWatermarking">Enable watermarking for group</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdWatermarkingAsyncWithHttpInfo (int? id, int? workspaceId, bool? groupWatermarking);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private Caplinked.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Caplinked.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete group Delete group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>GroupInfoDeleted</returns>
        public GroupInfoDeleted DeleteGroupsId (int? id, int? workspaceId)
        {
             ApiResponse<GroupInfoDeleted> localVarResponse = DeleteGroupsIdWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete group Delete group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of GroupInfoDeleted</returns>
        public ApiResponse< GroupInfoDeleted > DeleteGroupsIdWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->DeleteGroupsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->DeleteGroupsId");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfoDeleted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfoDeleted) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfoDeleted)));
        }

        /// <summary>
        /// Delete group Delete group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of GroupInfoDeleted</returns>
        public async System.Threading.Tasks.Task<GroupInfoDeleted> DeleteGroupsIdAsync (int? id, int? workspaceId)
        {
             ApiResponse<GroupInfoDeleted> localVarResponse = await DeleteGroupsIdAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete group Delete group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (GroupInfoDeleted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfoDeleted>> DeleteGroupsIdAsyncWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->DeleteGroupsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->DeleteGroupsId");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfoDeleted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfoDeleted) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfoDeleted)));
        }

        /// <summary>
        /// Remove a user from a group Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be removed from</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be removed from this group</param>
        /// <returns></returns>
        public void DeleteGroupsIdMemberships (int? id, int? workspaceId, int? userId)
        {
             DeleteGroupsIdMembershipsWithHttpInfo(id, workspaceId, userId);
        }

        /// <summary>
        /// Remove a user from a group Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be removed from</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be removed from this group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGroupsIdMembershipsWithHttpInfo (int? id, int? workspaceId, int? userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->DeleteGroupsIdMemberships");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->DeleteGroupsIdMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->DeleteGroupsIdMemberships");

            var localVarPath = "/groups/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from a group Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be removed from</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be removed from this group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupsIdMembershipsAsync (int? id, int? workspaceId, int? userId)
        {
             await DeleteGroupsIdMembershipsAsyncWithHttpInfo(id, workspaceId, userId);

        }

        /// <summary>
        /// Remove a user from a group Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be removed from</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be removed from this group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupsIdMembershipsAsyncWithHttpInfo (int? id, int? workspaceId, int? userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->DeleteGroupsIdMemberships");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->DeleteGroupsIdMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->DeleteGroupsIdMemberships");

            var localVarPath = "/groups/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all groups in workspace List all groups in workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace from which to list groups</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo GetGroups (int? workspaceId)
        {
             ApiResponse<GroupInfo> localVarResponse = GetGroupsWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all groups in workspace List all groups in workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace from which to list groups</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse< GroupInfo > GetGroupsWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetGroups");

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// List all groups in workspace List all groups in workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace from which to list groups</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> GetGroupsAsync (int? workspaceId)
        {
             ApiResponse<GroupInfo> localVarResponse = await GetGroupsAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all groups in workspace List all groups in workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace from which to list groups</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> GetGroupsAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetGroups");

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Get group information Get group information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo GetGroupsId (int? id, int? workspaceId)
        {
             ApiResponse<GroupInfo> localVarResponse = GetGroupsIdWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group information Get group information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse< GroupInfo > GetGroupsIdWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GetGroupsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetGroupsId");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Get group information Get group information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> GetGroupsIdAsync (int? id, int? workspaceId)
        {
             ApiResponse<GroupInfo> localVarResponse = await GetGroupsIdAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group information Get group information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> GetGroupsIdAsyncWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GetGroupsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetGroupsId");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// List all memberships for a group List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you want to list the members of</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>User</returns>
        public User GetGroupsIdMemberships (int? id, int? workspaceId)
        {
             ApiResponse<User> localVarResponse = GetGroupsIdMembershipsWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all memberships for a group List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you want to list the members of</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetGroupsIdMembershipsWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GetGroupsIdMemberships");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetGroupsIdMemberships");

            var localVarPath = "/groups/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// List all memberships for a group List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you want to list the members of</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetGroupsIdMembershipsAsync (int? id, int? workspaceId)
        {
             ApiResponse<User> localVarResponse = await GetGroupsIdMembershipsAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all memberships for a group List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you want to list the members of</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetGroupsIdMembershipsAsyncWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GetGroupsIdMemberships");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetGroupsIdMemberships");

            var localVarPath = "/groups/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Create group Create group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of group</param>
        /// <param name="groupWorkspaceId">Workspace ID for the group</param>
        /// <param name="groupFileManagingAbilities">Enable file managing abililies for uploading users (optional)</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo PostGroups (string groupName, int? groupWorkspaceId, bool? groupFileManagingAbilities = null)
        {
             ApiResponse<GroupInfo> localVarResponse = PostGroupsWithHttpInfo(groupName, groupWorkspaceId, groupFileManagingAbilities);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create group Create group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of group</param>
        /// <param name="groupWorkspaceId">Workspace ID for the group</param>
        /// <param name="groupFileManagingAbilities">Enable file managing abililies for uploading users (optional)</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse< GroupInfo > PostGroupsWithHttpInfo (string groupName, int? groupWorkspaceId, bool? groupFileManagingAbilities = null)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->PostGroups");
            // verify the required parameter 'groupWorkspaceId' is set
            if (groupWorkspaceId == null)
                throw new ApiException(400, "Missing required parameter 'groupWorkspaceId' when calling GroupsApi->PostGroups");

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupName != null) localVarFormParams.Add("group[name]", Configuration.ApiClient.ParameterToString(groupName)); // form parameter
            if (groupWorkspaceId != null) localVarFormParams.Add("group[workspace_id]", Configuration.ApiClient.ParameterToString(groupWorkspaceId)); // form parameter
            if (groupFileManagingAbilities != null) localVarFormParams.Add("group[file_managing_abilities]", Configuration.ApiClient.ParameterToString(groupFileManagingAbilities)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Create group Create group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of group</param>
        /// <param name="groupWorkspaceId">Workspace ID for the group</param>
        /// <param name="groupFileManagingAbilities">Enable file managing abililies for uploading users (optional)</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> PostGroupsAsync (string groupName, int? groupWorkspaceId, bool? groupFileManagingAbilities = null)
        {
             ApiResponse<GroupInfo> localVarResponse = await PostGroupsAsyncWithHttpInfo(groupName, groupWorkspaceId, groupFileManagingAbilities);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create group Create group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of group</param>
        /// <param name="groupWorkspaceId">Workspace ID for the group</param>
        /// <param name="groupFileManagingAbilities">Enable file managing abililies for uploading users (optional)</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PostGroupsAsyncWithHttpInfo (string groupName, int? groupWorkspaceId, bool? groupFileManagingAbilities = null)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->PostGroups");
            // verify the required parameter 'groupWorkspaceId' is set
            if (groupWorkspaceId == null)
                throw new ApiException(400, "Missing required parameter 'groupWorkspaceId' when calling GroupsApi->PostGroups");

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupName != null) localVarFormParams.Add("group[name]", Configuration.ApiClient.ParameterToString(groupName)); // form parameter
            if (groupWorkspaceId != null) localVarFormParams.Add("group[workspace_id]", Configuration.ApiClient.ParameterToString(groupWorkspaceId)); // form parameter
            if (groupFileManagingAbilities != null) localVarFormParams.Add("group[file_managing_abilities]", Configuration.ApiClient.ParameterToString(groupFileManagingAbilities)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Add user to group (adds to parent workspace if they are not already a member) Add user to group (adds to parent workspace if they are not already a member)
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be added to</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be added to this group</param>
        /// <param name="sendEmail">Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)</param>
        /// <returns></returns>
        public void PostGroupsIdMemberships (int? id, int? workspaceId, int? userId, bool? sendEmail = null)
        {
             PostGroupsIdMembershipsWithHttpInfo(id, workspaceId, userId, sendEmail);
        }

        /// <summary>
        /// Add user to group (adds to parent workspace if they are not already a member) Add user to group (adds to parent workspace if they are not already a member)
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be added to</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be added to this group</param>
        /// <param name="sendEmail">Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostGroupsIdMembershipsWithHttpInfo (int? id, int? workspaceId, int? userId, bool? sendEmail = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PostGroupsIdMemberships");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PostGroupsIdMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->PostGroupsIdMemberships");

            var localVarPath = "/groups/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (userId != null) localVarFormParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (sendEmail != null) localVarFormParams.Add("send_email", Configuration.ApiClient.ParameterToString(sendEmail)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGroupsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add user to group (adds to parent workspace if they are not already a member) Add user to group (adds to parent workspace if they are not already a member)
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be added to</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be added to this group</param>
        /// <param name="sendEmail">Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostGroupsIdMembershipsAsync (int? id, int? workspaceId, int? userId, bool? sendEmail = null)
        {
             await PostGroupsIdMembershipsAsyncWithHttpInfo(id, workspaceId, userId, sendEmail);

        }

        /// <summary>
        /// Add user to group (adds to parent workspace if they are not already a member) Add user to group (adds to parent workspace if they are not already a member)
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group you wish the user to be added to</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="userId">ID of the user to be added to this group</param>
        /// <param name="sendEmail">Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostGroupsIdMembershipsAsyncWithHttpInfo (int? id, int? workspaceId, int? userId, bool? sendEmail = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PostGroupsIdMemberships");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PostGroupsIdMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupsApi->PostGroupsIdMemberships");

            var localVarPath = "/groups/{id}/memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (userId != null) localVarFormParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (sendEmail != null) localVarFormParams.Add("send_email", Configuration.ApiClient.ParameterToString(sendEmail)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGroupsIdMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update group Update group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupName">Name of group (optional)</param>
        /// <param name="groupFileManagingAbilities">Ability to delete, rename, and reindex files for uploading users (optional)</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo PutGroupsId (int? id, int? workspaceId, string groupName = null, bool? groupFileManagingAbilities = null)
        {
             ApiResponse<GroupInfo> localVarResponse = PutGroupsIdWithHttpInfo(id, workspaceId, groupName, groupFileManagingAbilities);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update group Update group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupName">Name of group (optional)</param>
        /// <param name="groupFileManagingAbilities">Ability to delete, rename, and reindex files for uploading users (optional)</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse< GroupInfo > PutGroupsIdWithHttpInfo (int? id, int? workspaceId, string groupName = null, bool? groupFileManagingAbilities = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsId");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (groupName != null) localVarFormParams.Add("group[name]", Configuration.ApiClient.ParameterToString(groupName)); // form parameter
            if (groupFileManagingAbilities != null) localVarFormParams.Add("group[file_managing_abilities]", Configuration.ApiClient.ParameterToString(groupFileManagingAbilities)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Update group Update group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupName">Name of group (optional)</param>
        /// <param name="groupFileManagingAbilities">Ability to delete, rename, and reindex files for uploading users (optional)</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> PutGroupsIdAsync (int? id, int? workspaceId, string groupName = null, bool? groupFileManagingAbilities = null)
        {
             ApiResponse<GroupInfo> localVarResponse = await PutGroupsIdAsyncWithHttpInfo(id, workspaceId, groupName, groupFileManagingAbilities);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update group Update group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupName">Name of group (optional)</param>
        /// <param name="groupFileManagingAbilities">Ability to delete, rename, and reindex files for uploading users (optional)</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdAsyncWithHttpInfo (int? id, int? workspaceId, string groupName = null, bool? groupFileManagingAbilities = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsId");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (groupName != null) localVarFormParams.Add("group[name]", Configuration.ApiClient.ParameterToString(groupName)); // form parameter
            if (groupFileManagingAbilities != null) localVarFormParams.Add("group[file_managing_abilities]", Configuration.ApiClient.ParameterToString(groupFileManagingAbilities)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Disable DRM expiration for group Disable DRM expiration for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo PutGroupsIdDisableDrmExpiration (int? id, int? workspaceId)
        {
             ApiResponse<GroupInfo> localVarResponse = PutGroupsIdDisableDrmExpirationWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable DRM expiration for group Disable DRM expiration for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse< GroupInfo > PutGroupsIdDisableDrmExpirationWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdDisableDrmExpiration");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdDisableDrmExpiration");

            var localVarPath = "/groups/{id}/disable_drm_expiration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdDisableDrmExpiration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Disable DRM expiration for group Disable DRM expiration for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> PutGroupsIdDisableDrmExpirationAsync (int? id, int? workspaceId)
        {
             ApiResponse<GroupInfo> localVarResponse = await PutGroupsIdDisableDrmExpirationAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable DRM expiration for group Disable DRM expiration for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdDisableDrmExpirationAsyncWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdDisableDrmExpiration");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdDisableDrmExpiration");

            var localVarPath = "/groups/{id}/disable_drm_expiration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdDisableDrmExpiration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Disable access expiration for a group Disable access expiration for a group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo PutGroupsIdDisableExpireAccess (int? id, int? workspaceId)
        {
             ApiResponse<GroupInfo> localVarResponse = PutGroupsIdDisableExpireAccessWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable access expiration for a group Disable access expiration for a group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse< GroupInfo > PutGroupsIdDisableExpireAccessWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdDisableExpireAccess");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdDisableExpireAccess");

            var localVarPath = "/groups/{id}/disable_expire_access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdDisableExpireAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Disable access expiration for a group Disable access expiration for a group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> PutGroupsIdDisableExpireAccessAsync (int? id, int? workspaceId)
        {
             ApiResponse<GroupInfo> localVarResponse = await PutGroupsIdDisableExpireAccessAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable access expiration for a group Disable access expiration for a group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdDisableExpireAccessAsyncWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdDisableExpireAccess");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdDisableExpireAccess");

            var localVarPath = "/groups/{id}/disable_expire_access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdDisableExpireAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Update DRM for group Update DRM for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupDrmEnabled">Enable DRM for group</param>
        /// <param name="groupDrmExpiresAfter">Expire DRM after this date. Format: yyyy-mm-dd (optional)</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo PutGroupsIdDrm (int? id, int? workspaceId, string groupDrmEnabled, DateTime? groupDrmExpiresAfter = null)
        {
             ApiResponse<GroupInfo> localVarResponse = PutGroupsIdDrmWithHttpInfo(id, workspaceId, groupDrmEnabled, groupDrmExpiresAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update DRM for group Update DRM for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupDrmEnabled">Enable DRM for group</param>
        /// <param name="groupDrmExpiresAfter">Expire DRM after this date. Format: yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse< GroupInfo > PutGroupsIdDrmWithHttpInfo (int? id, int? workspaceId, string groupDrmEnabled, DateTime? groupDrmExpiresAfter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdDrm");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdDrm");
            // verify the required parameter 'groupDrmEnabled' is set
            if (groupDrmEnabled == null)
                throw new ApiException(400, "Missing required parameter 'groupDrmEnabled' when calling GroupsApi->PutGroupsIdDrm");

            var localVarPath = "/groups/{id}/drm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (groupDrmEnabled != null) localVarFormParams.Add("group[drm_enabled]", Configuration.ApiClient.ParameterToString(groupDrmEnabled)); // form parameter
            if (groupDrmExpiresAfter != null) localVarFormParams.Add("group[drm_expires_after]", Configuration.ApiClient.ParameterToString(groupDrmExpiresAfter)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdDrm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Update DRM for group Update DRM for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupDrmEnabled">Enable DRM for group</param>
        /// <param name="groupDrmExpiresAfter">Expire DRM after this date. Format: yyyy-mm-dd (optional)</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> PutGroupsIdDrmAsync (int? id, int? workspaceId, string groupDrmEnabled, DateTime? groupDrmExpiresAfter = null)
        {
             ApiResponse<GroupInfo> localVarResponse = await PutGroupsIdDrmAsyncWithHttpInfo(id, workspaceId, groupDrmEnabled, groupDrmExpiresAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update DRM for group Update DRM for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupDrmEnabled">Enable DRM for group</param>
        /// <param name="groupDrmExpiresAfter">Expire DRM after this date. Format: yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdDrmAsyncWithHttpInfo (int? id, int? workspaceId, string groupDrmEnabled, DateTime? groupDrmExpiresAfter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdDrm");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdDrm");
            // verify the required parameter 'groupDrmEnabled' is set
            if (groupDrmEnabled == null)
                throw new ApiException(400, "Missing required parameter 'groupDrmEnabled' when calling GroupsApi->PutGroupsIdDrm");

            var localVarPath = "/groups/{id}/drm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (groupDrmEnabled != null) localVarFormParams.Add("group[drm_enabled]", Configuration.ApiClient.ParameterToString(groupDrmEnabled)); // form parameter
            if (groupDrmExpiresAfter != null) localVarFormParams.Add("group[drm_expires_after]", Configuration.ApiClient.ParameterToString(groupDrmExpiresAfter)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdDrm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Enable access expiration for a group Enable access expiration for a group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupExpireWorkspaceAccessAt">Expire access on the following date. Format: yyyy-mm-dd</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo PutGroupsIdEnableExpireAccess (int? id, int? workspaceId, DateTime? groupExpireWorkspaceAccessAt)
        {
             ApiResponse<GroupInfo> localVarResponse = PutGroupsIdEnableExpireAccessWithHttpInfo(id, workspaceId, groupExpireWorkspaceAccessAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable access expiration for a group Enable access expiration for a group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupExpireWorkspaceAccessAt">Expire access on the following date. Format: yyyy-mm-dd</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse< GroupInfo > PutGroupsIdEnableExpireAccessWithHttpInfo (int? id, int? workspaceId, DateTime? groupExpireWorkspaceAccessAt)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdEnableExpireAccess");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdEnableExpireAccess");
            // verify the required parameter 'groupExpireWorkspaceAccessAt' is set
            if (groupExpireWorkspaceAccessAt == null)
                throw new ApiException(400, "Missing required parameter 'groupExpireWorkspaceAccessAt' when calling GroupsApi->PutGroupsIdEnableExpireAccess");

            var localVarPath = "/groups/{id}/enable_expire_access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (groupExpireWorkspaceAccessAt != null) localVarFormParams.Add("group[expire_workspace_access_at]", Configuration.ApiClient.ParameterToString(groupExpireWorkspaceAccessAt)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdEnableExpireAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Enable access expiration for a group Enable access expiration for a group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupExpireWorkspaceAccessAt">Expire access on the following date. Format: yyyy-mm-dd</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> PutGroupsIdEnableExpireAccessAsync (int? id, int? workspaceId, DateTime? groupExpireWorkspaceAccessAt)
        {
             ApiResponse<GroupInfo> localVarResponse = await PutGroupsIdEnableExpireAccessAsyncWithHttpInfo(id, workspaceId, groupExpireWorkspaceAccessAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable access expiration for a group Enable access expiration for a group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupExpireWorkspaceAccessAt">Expire access on the following date. Format: yyyy-mm-dd</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdEnableExpireAccessAsyncWithHttpInfo (int? id, int? workspaceId, DateTime? groupExpireWorkspaceAccessAt)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdEnableExpireAccess");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdEnableExpireAccess");
            // verify the required parameter 'groupExpireWorkspaceAccessAt' is set
            if (groupExpireWorkspaceAccessAt == null)
                throw new ApiException(400, "Missing required parameter 'groupExpireWorkspaceAccessAt' when calling GroupsApi->PutGroupsIdEnableExpireAccess");

            var localVarPath = "/groups/{id}/enable_expire_access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (groupExpireWorkspaceAccessAt != null) localVarFormParams.Add("group[expire_workspace_access_at]", Configuration.ApiClient.ParameterToString(groupExpireWorkspaceAccessAt)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdEnableExpireAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Watermarking for group Watermarking for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupWatermarking">Enable watermarking for group</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo PutGroupsIdWatermarking (int? id, int? workspaceId, bool? groupWatermarking)
        {
             ApiResponse<GroupInfo> localVarResponse = PutGroupsIdWatermarkingWithHttpInfo(id, workspaceId, groupWatermarking);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Watermarking for group Watermarking for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupWatermarking">Enable watermarking for group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse< GroupInfo > PutGroupsIdWatermarkingWithHttpInfo (int? id, int? workspaceId, bool? groupWatermarking)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdWatermarking");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdWatermarking");
            // verify the required parameter 'groupWatermarking' is set
            if (groupWatermarking == null)
                throw new ApiException(400, "Missing required parameter 'groupWatermarking' when calling GroupsApi->PutGroupsIdWatermarking");

            var localVarPath = "/groups/{id}/watermarking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (groupWatermarking != null) localVarFormParams.Add("group[watermarking]", Configuration.ApiClient.ParameterToString(groupWatermarking)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdWatermarking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        /// Watermarking for group Watermarking for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupWatermarking">Enable watermarking for group</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> PutGroupsIdWatermarkingAsync (int? id, int? workspaceId, bool? groupWatermarking)
        {
             ApiResponse<GroupInfo> localVarResponse = await PutGroupsIdWatermarkingAsyncWithHttpInfo(id, workspaceId, groupWatermarking);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Watermarking for group Watermarking for group
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to update</param>
        /// <param name="workspaceId">Workspace ID for the group</param>
        /// <param name="groupWatermarking">Enable watermarking for group</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> PutGroupsIdWatermarkingAsyncWithHttpInfo (int? id, int? workspaceId, bool? groupWatermarking)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->PutGroupsIdWatermarking");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutGroupsIdWatermarking");
            // verify the required parameter 'groupWatermarking' is set
            if (groupWatermarking == null)
                throw new ApiException(400, "Missing required parameter 'groupWatermarking' when calling GroupsApi->PutGroupsIdWatermarking");

            var localVarPath = "/groups/{id}/watermarking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (groupWatermarking != null) localVarFormParams.Add("group[watermarking]", Configuration.ApiClient.ParameterToString(groupWatermarking)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGroupsIdWatermarking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

    }
}
