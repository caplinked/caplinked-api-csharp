/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Caplinked.Client;
using Caplinked.Model;

namespace Caplinked.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// Delete file
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>FileDelete</returns>
        FileDelete DeleteFilesId (int? id, int? workspaceId);

        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// Delete file
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>ApiResponse of FileDelete</returns>
        ApiResponse<FileDelete> DeleteFilesIdWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Get file information
        /// </summary>
        /// <remarks>
        /// Get file information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="pageNumber">Page number of file (for viewer tokens) (optional, default to 1)</param>
        /// <returns>FileInfoMapped</returns>
        FileInfoMapped GetFilesId (int? id, int? workspaceId, int? pageNumber = null);

        /// <summary>
        /// Get file information
        /// </summary>
        /// <remarks>
        /// Get file information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="pageNumber">Page number of file (for viewer tokens) (optional, default to 1)</param>
        /// <returns>ApiResponse of FileInfoMapped</returns>
        ApiResponse<FileInfoMapped> GetFilesIdWithHttpInfo (int? id, int? workspaceId, int? pageNumber = null);
        /// <summary>
        /// Copy file
        /// </summary>
        /// <remarks>
        /// Copy file into another folder (existing file will not be modified)
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>FileCopyMove</returns>
        FileCopyMove PostFilesIdCopy (int? id, int? workspaceId, int? destinationFolderId);

        /// <summary>
        /// Copy file
        /// </summary>
        /// <remarks>
        /// Copy file into another folder (existing file will not be modified)
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>ApiResponse of FileCopyMove</returns>
        ApiResponse<FileCopyMove> PostFilesIdCopyWithHttpInfo (int? id, int? workspaceId, int? destinationFolderId);
        /// <summary>
        /// Move file
        /// </summary>
        /// <remarks>
        /// Move file into another folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>FileCopyMove</returns>
        FileCopyMove PostFilesIdMove (int? id, int? workspaceId, int? destinationFolderId);

        /// <summary>
        /// Move file
        /// </summary>
        /// <remarks>
        /// Move file into another folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>ApiResponse of FileCopyMove</returns>
        ApiResponse<FileCopyMove> PostFilesIdMoveWithHttpInfo (int? id, int? workspaceId, int? destinationFolderId);
        /// <summary>
        /// Update file information
        /// </summary>
        /// <remarks>
        /// Update file information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="fileTitle">Title of file (optional)</param>
        /// <param name="fileIndex">Index number of file within current folder scope (integer) (optional)</param>
        /// <returns>FileInfoMapped</returns>
        FileInfoMapped PutFilesId (int? id, int? workspaceId, string fileTitle = null, int? fileIndex = null);

        /// <summary>
        /// Update file information
        /// </summary>
        /// <remarks>
        /// Update file information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="fileTitle">Title of file (optional)</param>
        /// <param name="fileIndex">Index number of file within current folder scope (integer) (optional)</param>
        /// <returns>ApiResponse of FileInfoMapped</returns>
        ApiResponse<FileInfoMapped> PutFilesIdWithHttpInfo (int? id, int? workspaceId, string fileTitle = null, int? fileIndex = null);
        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// Create or update a file with the same file name. Request body should be the file body itself as binary data.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="folderId">Folder ID</param>
        /// <param name="fileName">File name</param>
        /// <returns>FileInfoCompact</returns>
        FileInfoCompact PutFilesUpload (int? workspaceId, int? folderId, string fileName);

        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// Create or update a file with the same file name. Request body should be the file body itself as binary data.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="folderId">Folder ID</param>
        /// <param name="fileName">File name</param>
        /// <returns>ApiResponse of FileInfoCompact</returns>
        ApiResponse<FileInfoCompact> PutFilesUploadWithHttpInfo (int? workspaceId, int? folderId, string fileName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// Delete file
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of FileDelete</returns>
        System.Threading.Tasks.Task<FileDelete> DeleteFilesIdAsync (int? id, int? workspaceId);

        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// Delete file
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of ApiResponse (FileDelete)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDelete>> DeleteFilesIdAsyncWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Get file information
        /// </summary>
        /// <remarks>
        /// Get file information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="pageNumber">Page number of file (for viewer tokens) (optional, default to 1)</param>
        /// <returns>Task of FileInfoMapped</returns>
        System.Threading.Tasks.Task<FileInfoMapped> GetFilesIdAsync (int? id, int? workspaceId, int? pageNumber = null);

        /// <summary>
        /// Get file information
        /// </summary>
        /// <remarks>
        /// Get file information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="pageNumber">Page number of file (for viewer tokens) (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (FileInfoMapped)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileInfoMapped>> GetFilesIdAsyncWithHttpInfo (int? id, int? workspaceId, int? pageNumber = null);
        /// <summary>
        /// Copy file
        /// </summary>
        /// <remarks>
        /// Copy file into another folder (existing file will not be modified)
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of FileCopyMove</returns>
        System.Threading.Tasks.Task<FileCopyMove> PostFilesIdCopyAsync (int? id, int? workspaceId, int? destinationFolderId);

        /// <summary>
        /// Copy file
        /// </summary>
        /// <remarks>
        /// Copy file into another folder (existing file will not be modified)
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of ApiResponse (FileCopyMove)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileCopyMove>> PostFilesIdCopyAsyncWithHttpInfo (int? id, int? workspaceId, int? destinationFolderId);
        /// <summary>
        /// Move file
        /// </summary>
        /// <remarks>
        /// Move file into another folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of FileCopyMove</returns>
        System.Threading.Tasks.Task<FileCopyMove> PostFilesIdMoveAsync (int? id, int? workspaceId, int? destinationFolderId);

        /// <summary>
        /// Move file
        /// </summary>
        /// <remarks>
        /// Move file into another folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of ApiResponse (FileCopyMove)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileCopyMove>> PostFilesIdMoveAsyncWithHttpInfo (int? id, int? workspaceId, int? destinationFolderId);
        /// <summary>
        /// Update file information
        /// </summary>
        /// <remarks>
        /// Update file information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="fileTitle">Title of file (optional)</param>
        /// <param name="fileIndex">Index number of file within current folder scope (integer) (optional)</param>
        /// <returns>Task of FileInfoMapped</returns>
        System.Threading.Tasks.Task<FileInfoMapped> PutFilesIdAsync (int? id, int? workspaceId, string fileTitle = null, int? fileIndex = null);

        /// <summary>
        /// Update file information
        /// </summary>
        /// <remarks>
        /// Update file information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="fileTitle">Title of file (optional)</param>
        /// <param name="fileIndex">Index number of file within current folder scope (integer) (optional)</param>
        /// <returns>Task of ApiResponse (FileInfoMapped)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileInfoMapped>> PutFilesIdAsyncWithHttpInfo (int? id, int? workspaceId, string fileTitle = null, int? fileIndex = null);
        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// Create or update a file with the same file name. Request body should be the file body itself as binary data.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="folderId">Folder ID</param>
        /// <param name="fileName">File name</param>
        /// <returns>Task of FileInfoCompact</returns>
        System.Threading.Tasks.Task<FileInfoCompact> PutFilesUploadAsync (int? workspaceId, int? folderId, string fileName);

        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// Create or update a file with the same file name. Request body should be the file body itself as binary data.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="folderId">Folder ID</param>
        /// <param name="fileName">File name</param>
        /// <returns>Task of ApiResponse (FileInfoCompact)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileInfoCompact>> PutFilesUploadAsyncWithHttpInfo (int? workspaceId, int? folderId, string fileName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private Caplinked.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Caplinked.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete file Delete file
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>FileDelete</returns>
        public FileDelete DeleteFilesId (int? id, int? workspaceId)
        {
             ApiResponse<FileDelete> localVarResponse = DeleteFilesIdWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete file Delete file
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>ApiResponse of FileDelete</returns>
        public ApiResponse< FileDelete > DeleteFilesIdWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->DeleteFilesId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->DeleteFilesId");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFilesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDelete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDelete) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDelete)));
        }

        /// <summary>
        /// Delete file Delete file
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of FileDelete</returns>
        public async System.Threading.Tasks.Task<FileDelete> DeleteFilesIdAsync (int? id, int? workspaceId)
        {
             ApiResponse<FileDelete> localVarResponse = await DeleteFilesIdAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete file Delete file
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of ApiResponse (FileDelete)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDelete>> DeleteFilesIdAsyncWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->DeleteFilesId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->DeleteFilesId");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFilesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDelete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDelete) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDelete)));
        }

        /// <summary>
        /// Get file information Get file information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="pageNumber">Page number of file (for viewer tokens) (optional, default to 1)</param>
        /// <returns>FileInfoMapped</returns>
        public FileInfoMapped GetFilesId (int? id, int? workspaceId, int? pageNumber = null)
        {
             ApiResponse<FileInfoMapped> localVarResponse = GetFilesIdWithHttpInfo(id, workspaceId, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get file information Get file information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="pageNumber">Page number of file (for viewer tokens) (optional, default to 1)</param>
        /// <returns>ApiResponse of FileInfoMapped</returns>
        public ApiResponse< FileInfoMapped > GetFilesIdWithHttpInfo (int? id, int? workspaceId, int? pageNumber = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->GetFilesId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->GetFilesId");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("page_number", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfoMapped>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfoMapped) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfoMapped)));
        }

        /// <summary>
        /// Get file information Get file information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="pageNumber">Page number of file (for viewer tokens) (optional, default to 1)</param>
        /// <returns>Task of FileInfoMapped</returns>
        public async System.Threading.Tasks.Task<FileInfoMapped> GetFilesIdAsync (int? id, int? workspaceId, int? pageNumber = null)
        {
             ApiResponse<FileInfoMapped> localVarResponse = await GetFilesIdAsyncWithHttpInfo(id, workspaceId, pageNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get file information Get file information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="pageNumber">Page number of file (for viewer tokens) (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (FileInfoMapped)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileInfoMapped>> GetFilesIdAsyncWithHttpInfo (int? id, int? workspaceId, int? pageNumber = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->GetFilesId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->GetFilesId");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("page_number", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfoMapped>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfoMapped) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfoMapped)));
        }

        /// <summary>
        /// Copy file Copy file into another folder (existing file will not be modified)
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>FileCopyMove</returns>
        public FileCopyMove PostFilesIdCopy (int? id, int? workspaceId, int? destinationFolderId)
        {
             ApiResponse<FileCopyMove> localVarResponse = PostFilesIdCopyWithHttpInfo(id, workspaceId, destinationFolderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy file Copy file into another folder (existing file will not be modified)
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>ApiResponse of FileCopyMove</returns>
        public ApiResponse< FileCopyMove > PostFilesIdCopyWithHttpInfo (int? id, int? workspaceId, int? destinationFolderId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->PostFilesIdCopy");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->PostFilesIdCopy");
            // verify the required parameter 'destinationFolderId' is set
            if (destinationFolderId == null)
                throw new ApiException(400, "Missing required parameter 'destinationFolderId' when calling FilesApi->PostFilesIdCopy");

            var localVarPath = "/files/{id}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (destinationFolderId != null) localVarFormParams.Add("destination_folder_id", Configuration.ApiClient.ParameterToString(destinationFolderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFilesIdCopy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileCopyMove>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileCopyMove) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileCopyMove)));
        }

        /// <summary>
        /// Copy file Copy file into another folder (existing file will not be modified)
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of FileCopyMove</returns>
        public async System.Threading.Tasks.Task<FileCopyMove> PostFilesIdCopyAsync (int? id, int? workspaceId, int? destinationFolderId)
        {
             ApiResponse<FileCopyMove> localVarResponse = await PostFilesIdCopyAsyncWithHttpInfo(id, workspaceId, destinationFolderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy file Copy file into another folder (existing file will not be modified)
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of ApiResponse (FileCopyMove)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileCopyMove>> PostFilesIdCopyAsyncWithHttpInfo (int? id, int? workspaceId, int? destinationFolderId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->PostFilesIdCopy");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->PostFilesIdCopy");
            // verify the required parameter 'destinationFolderId' is set
            if (destinationFolderId == null)
                throw new ApiException(400, "Missing required parameter 'destinationFolderId' when calling FilesApi->PostFilesIdCopy");

            var localVarPath = "/files/{id}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (destinationFolderId != null) localVarFormParams.Add("destination_folder_id", Configuration.ApiClient.ParameterToString(destinationFolderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFilesIdCopy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileCopyMove>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileCopyMove) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileCopyMove)));
        }

        /// <summary>
        /// Move file Move file into another folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>FileCopyMove</returns>
        public FileCopyMove PostFilesIdMove (int? id, int? workspaceId, int? destinationFolderId)
        {
             ApiResponse<FileCopyMove> localVarResponse = PostFilesIdMoveWithHttpInfo(id, workspaceId, destinationFolderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move file Move file into another folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>ApiResponse of FileCopyMove</returns>
        public ApiResponse< FileCopyMove > PostFilesIdMoveWithHttpInfo (int? id, int? workspaceId, int? destinationFolderId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->PostFilesIdMove");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->PostFilesIdMove");
            // verify the required parameter 'destinationFolderId' is set
            if (destinationFolderId == null)
                throw new ApiException(400, "Missing required parameter 'destinationFolderId' when calling FilesApi->PostFilesIdMove");

            var localVarPath = "/files/{id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (destinationFolderId != null) localVarFormParams.Add("destination_folder_id", Configuration.ApiClient.ParameterToString(destinationFolderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFilesIdMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileCopyMove>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileCopyMove) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileCopyMove)));
        }

        /// <summary>
        /// Move file Move file into another folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of FileCopyMove</returns>
        public async System.Threading.Tasks.Task<FileCopyMove> PostFilesIdMoveAsync (int? id, int? workspaceId, int? destinationFolderId)
        {
             ApiResponse<FileCopyMove> localVarResponse = await PostFilesIdMoveAsyncWithHttpInfo(id, workspaceId, destinationFolderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move file Move file into another folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of ApiResponse (FileCopyMove)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileCopyMove>> PostFilesIdMoveAsyncWithHttpInfo (int? id, int? workspaceId, int? destinationFolderId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->PostFilesIdMove");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->PostFilesIdMove");
            // verify the required parameter 'destinationFolderId' is set
            if (destinationFolderId == null)
                throw new ApiException(400, "Missing required parameter 'destinationFolderId' when calling FilesApi->PostFilesIdMove");

            var localVarPath = "/files/{id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (destinationFolderId != null) localVarFormParams.Add("destination_folder_id", Configuration.ApiClient.ParameterToString(destinationFolderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFilesIdMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileCopyMove>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileCopyMove) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileCopyMove)));
        }

        /// <summary>
        /// Update file information Update file information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="fileTitle">Title of file (optional)</param>
        /// <param name="fileIndex">Index number of file within current folder scope (integer) (optional)</param>
        /// <returns>FileInfoMapped</returns>
        public FileInfoMapped PutFilesId (int? id, int? workspaceId, string fileTitle = null, int? fileIndex = null)
        {
             ApiResponse<FileInfoMapped> localVarResponse = PutFilesIdWithHttpInfo(id, workspaceId, fileTitle, fileIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update file information Update file information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="fileTitle">Title of file (optional)</param>
        /// <param name="fileIndex">Index number of file within current folder scope (integer) (optional)</param>
        /// <returns>ApiResponse of FileInfoMapped</returns>
        public ApiResponse< FileInfoMapped > PutFilesIdWithHttpInfo (int? id, int? workspaceId, string fileTitle = null, int? fileIndex = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->PutFilesId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->PutFilesId");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (fileTitle != null) localVarFormParams.Add("file[title]", Configuration.ApiClient.ParameterToString(fileTitle)); // form parameter
            if (fileIndex != null) localVarFormParams.Add("file[index]", Configuration.ApiClient.ParameterToString(fileIndex)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFilesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfoMapped>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfoMapped) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfoMapped)));
        }

        /// <summary>
        /// Update file information Update file information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="fileTitle">Title of file (optional)</param>
        /// <param name="fileIndex">Index number of file within current folder scope (integer) (optional)</param>
        /// <returns>Task of FileInfoMapped</returns>
        public async System.Threading.Tasks.Task<FileInfoMapped> PutFilesIdAsync (int? id, int? workspaceId, string fileTitle = null, int? fileIndex = null)
        {
             ApiResponse<FileInfoMapped> localVarResponse = await PutFilesIdAsyncWithHttpInfo(id, workspaceId, fileTitle, fileIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update file information Update file information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="fileTitle">Title of file (optional)</param>
        /// <param name="fileIndex">Index number of file within current folder scope (integer) (optional)</param>
        /// <returns>Task of ApiResponse (FileInfoMapped)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileInfoMapped>> PutFilesIdAsyncWithHttpInfo (int? id, int? workspaceId, string fileTitle = null, int? fileIndex = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->PutFilesId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->PutFilesId");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (fileTitle != null) localVarFormParams.Add("file[title]", Configuration.ApiClient.ParameterToString(fileTitle)); // form parameter
            if (fileIndex != null) localVarFormParams.Add("file[index]", Configuration.ApiClient.ParameterToString(fileIndex)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFilesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfoMapped>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfoMapped) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfoMapped)));
        }

        /// <summary>
        /// Upload file Create or update a file with the same file name. Request body should be the file body itself as binary data.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="folderId">Folder ID</param>
        /// <param name="fileName">File name</param>
        /// <returns>FileInfoCompact</returns>
        public FileInfoCompact PutFilesUpload (int? workspaceId, int? folderId, string fileName)
        {
             ApiResponse<FileInfoCompact> localVarResponse = PutFilesUploadWithHttpInfo(workspaceId, folderId, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload file Create or update a file with the same file name. Request body should be the file body itself as binary data.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="folderId">Folder ID</param>
        /// <param name="fileName">File name</param>
        /// <returns>ApiResponse of FileInfoCompact</returns>
        public ApiResponse< FileInfoCompact > PutFilesUploadWithHttpInfo (int? workspaceId, int? folderId, string fileName)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->PutFilesUpload");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FilesApi->PutFilesUpload");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FilesApi->PutFilesUpload");

            var localVarPath = "/files/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (folderId != null) localVarFormParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // form parameter
            if (fileName != null) localVarFormParams.Add("file_name", Configuration.ApiClient.ParameterToString(fileName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFilesUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfoCompact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfoCompact) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfoCompact)));
        }

        /// <summary>
        /// Upload file Create or update a file with the same file name. Request body should be the file body itself as binary data.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="folderId">Folder ID</param>
        /// <param name="fileName">File name</param>
        /// <returns>Task of FileInfoCompact</returns>
        public async System.Threading.Tasks.Task<FileInfoCompact> PutFilesUploadAsync (int? workspaceId, int? folderId, string fileName)
        {
             ApiResponse<FileInfoCompact> localVarResponse = await PutFilesUploadAsyncWithHttpInfo(workspaceId, folderId, fileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload file Create or update a file with the same file name. Request body should be the file body itself as binary data.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="folderId">Folder ID</param>
        /// <param name="fileName">File name</param>
        /// <returns>Task of ApiResponse (FileInfoCompact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileInfoCompact>> PutFilesUploadAsyncWithHttpInfo (int? workspaceId, int? folderId, string fileName)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FilesApi->PutFilesUpload");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FilesApi->PutFilesUpload");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FilesApi->PutFilesUpload");

            var localVarPath = "/files/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (folderId != null) localVarFormParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // form parameter
            if (fileName != null) localVarFormParams.Add("file_name", Configuration.ApiClient.ParameterToString(fileName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFilesUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfoCompact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfoCompact) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfoCompact)));
        }

    }
}
