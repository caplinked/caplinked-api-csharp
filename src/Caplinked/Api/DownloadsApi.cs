/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Caplinked.Client;
using Caplinked.Model;

namespace Caplinked.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDownloadsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete download
        /// </summary>
        /// <remarks>
        /// Delete download
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download to delete</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Delete</returns>
        Delete DeleteDownloadsId (int? id, int? workspaceId);

        /// <summary>
        /// Delete download
        /// </summary>
        /// <remarks>
        /// Delete download
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download to delete</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ApiResponse of Delete</returns>
        ApiResponse<Delete> DeleteDownloadsIdWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Get single file
        /// </summary>
        /// <remarks>
        /// Download single file without DRM applied
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ExpiringUrl</returns>
        ExpiringUrl GetDownloadsFileFileId (int? fileId, int? workspaceId);

        /// <summary>
        /// Get single file
        /// </summary>
        /// <remarks>
        /// Download single file without DRM applied
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ApiResponse of ExpiringUrl</returns>
        ApiResponse<ExpiringUrl> GetDownloadsFileFileIdWithHttpInfo (int? fileId, int? workspaceId);
        /// <summary>
        /// Get zip
        /// </summary>
        /// <remarks>
        /// Get a zip file of a previously created download object
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ExpiringUrl</returns>
        ExpiringUrl GetDownloadsId (int? id, int? workspaceId);

        /// <summary>
        /// Get zip
        /// </summary>
        /// <remarks>
        /// Get a zip file of a previously created download object
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ApiResponse of ExpiringUrl</returns>
        ApiResponse<ExpiringUrl> GetDownloadsIdWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Get status of downloads for current user
        /// </summary>
        /// <remarks>
        /// Get status of downloads created by current user within a specified workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Meta</returns>
        Meta GetDownloadsStatusWorkspaceId (int? workspaceId);

        /// <summary>
        /// Get status of downloads for current user
        /// </summary>
        /// <remarks>
        /// Get status of downloads created by current user within a specified workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ApiResponse of Meta</returns>
        ApiResponse<Meta> GetDownloadsStatusWorkspaceIdWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Create zip file
        /// </summary>
        /// <remarks>
        /// Create download object containing folders and/or files
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <param name="downloadFolderIds">IDs of folders to include in download (optional)</param>
        /// <param name="downloadFileIds">IDs of files to include in download (optional)</param>
        /// <returns>Meta</returns>
        Meta PostDownloads (int? workspaceId, List<int?> downloadFolderIds = null, List<int?> downloadFileIds = null);

        /// <summary>
        /// Create zip file
        /// </summary>
        /// <remarks>
        /// Create download object containing folders and/or files
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <param name="downloadFolderIds">IDs of folders to include in download (optional)</param>
        /// <param name="downloadFileIds">IDs of files to include in download (optional)</param>
        /// <returns>ApiResponse of Meta</returns>
        ApiResponse<Meta> PostDownloadsWithHttpInfo (int? workspaceId, List<int?> downloadFolderIds = null, List<int?> downloadFileIds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete download
        /// </summary>
        /// <remarks>
        /// Delete download
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download to delete</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of Delete</returns>
        System.Threading.Tasks.Task<Delete> DeleteDownloadsIdAsync (int? id, int? workspaceId);

        /// <summary>
        /// Delete download
        /// </summary>
        /// <remarks>
        /// Delete download
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download to delete</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ApiResponse (Delete)</returns>
        System.Threading.Tasks.Task<ApiResponse<Delete>> DeleteDownloadsIdAsyncWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Get single file
        /// </summary>
        /// <remarks>
        /// Download single file without DRM applied
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ExpiringUrl</returns>
        System.Threading.Tasks.Task<ExpiringUrl> GetDownloadsFileFileIdAsync (int? fileId, int? workspaceId);

        /// <summary>
        /// Get single file
        /// </summary>
        /// <remarks>
        /// Download single file without DRM applied
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ApiResponse (ExpiringUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpiringUrl>> GetDownloadsFileFileIdAsyncWithHttpInfo (int? fileId, int? workspaceId);
        /// <summary>
        /// Get zip
        /// </summary>
        /// <remarks>
        /// Get a zip file of a previously created download object
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ExpiringUrl</returns>
        System.Threading.Tasks.Task<ExpiringUrl> GetDownloadsIdAsync (int? id, int? workspaceId);

        /// <summary>
        /// Get zip
        /// </summary>
        /// <remarks>
        /// Get a zip file of a previously created download object
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ApiResponse (ExpiringUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpiringUrl>> GetDownloadsIdAsyncWithHttpInfo (int? id, int? workspaceId);
        /// <summary>
        /// Get status of downloads for current user
        /// </summary>
        /// <remarks>
        /// Get status of downloads created by current user within a specified workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of Meta</returns>
        System.Threading.Tasks.Task<Meta> GetDownloadsStatusWorkspaceIdAsync (int? workspaceId);

        /// <summary>
        /// Get status of downloads for current user
        /// </summary>
        /// <remarks>
        /// Get status of downloads created by current user within a specified workspace
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ApiResponse (Meta)</returns>
        System.Threading.Tasks.Task<ApiResponse<Meta>> GetDownloadsStatusWorkspaceIdAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Create zip file
        /// </summary>
        /// <remarks>
        /// Create download object containing folders and/or files
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <param name="downloadFolderIds">IDs of folders to include in download (optional)</param>
        /// <param name="downloadFileIds">IDs of files to include in download (optional)</param>
        /// <returns>Task of Meta</returns>
        System.Threading.Tasks.Task<Meta> PostDownloadsAsync (int? workspaceId, List<int?> downloadFolderIds = null, List<int?> downloadFileIds = null);

        /// <summary>
        /// Create zip file
        /// </summary>
        /// <remarks>
        /// Create download object containing folders and/or files
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <param name="downloadFolderIds">IDs of folders to include in download (optional)</param>
        /// <param name="downloadFileIds">IDs of files to include in download (optional)</param>
        /// <returns>Task of ApiResponse (Meta)</returns>
        System.Threading.Tasks.Task<ApiResponse<Meta>> PostDownloadsAsyncWithHttpInfo (int? workspaceId, List<int?> downloadFolderIds = null, List<int?> downloadFileIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DownloadsApi : IDownloadsApi
    {
        private Caplinked.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DownloadsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DownloadsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Caplinked.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete download Delete download
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download to delete</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Delete</returns>
        public Delete DeleteDownloadsId (int? id, int? workspaceId)
        {
             ApiResponse<Delete> localVarResponse = DeleteDownloadsIdWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete download Delete download
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download to delete</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ApiResponse of Delete</returns>
        public ApiResponse< Delete > DeleteDownloadsIdWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DownloadsApi->DeleteDownloadsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->DeleteDownloadsId");

            var localVarPath = "/downloads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDownloadsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Delete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Delete) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Delete)));
        }

        /// <summary>
        /// Delete download Delete download
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download to delete</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of Delete</returns>
        public async System.Threading.Tasks.Task<Delete> DeleteDownloadsIdAsync (int? id, int? workspaceId)
        {
             ApiResponse<Delete> localVarResponse = await DeleteDownloadsIdAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete download Delete download
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download to delete</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ApiResponse (Delete)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Delete>> DeleteDownloadsIdAsyncWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DownloadsApi->DeleteDownloadsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->DeleteDownloadsId");

            var localVarPath = "/downloads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDownloadsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Delete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Delete) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Delete)));
        }

        /// <summary>
        /// Get single file Download single file without DRM applied
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ExpiringUrl</returns>
        public ExpiringUrl GetDownloadsFileFileId (int? fileId, int? workspaceId)
        {
             ApiResponse<ExpiringUrl> localVarResponse = GetDownloadsFileFileIdWithHttpInfo(fileId, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single file Download single file without DRM applied
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ApiResponse of ExpiringUrl</returns>
        public ApiResponse< ExpiringUrl > GetDownloadsFileFileIdWithHttpInfo (int? fileId, int? workspaceId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling DownloadsApi->GetDownloadsFileFileId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->GetDownloadsFileFileId");

            var localVarPath = "/downloads/file/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("file_id", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadsFileFileId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpiringUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExpiringUrl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpiringUrl)));
        }

        /// <summary>
        /// Get single file Download single file without DRM applied
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ExpiringUrl</returns>
        public async System.Threading.Tasks.Task<ExpiringUrl> GetDownloadsFileFileIdAsync (int? fileId, int? workspaceId)
        {
             ApiResponse<ExpiringUrl> localVarResponse = await GetDownloadsFileFileIdAsyncWithHttpInfo(fileId, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single file Download single file without DRM applied
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ApiResponse (ExpiringUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpiringUrl>> GetDownloadsFileFileIdAsyncWithHttpInfo (int? fileId, int? workspaceId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling DownloadsApi->GetDownloadsFileFileId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->GetDownloadsFileFileId");

            var localVarPath = "/downloads/file/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("file_id", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadsFileFileId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpiringUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExpiringUrl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpiringUrl)));
        }

        /// <summary>
        /// Get zip Get a zip file of a previously created download object
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ExpiringUrl</returns>
        public ExpiringUrl GetDownloadsId (int? id, int? workspaceId)
        {
             ApiResponse<ExpiringUrl> localVarResponse = GetDownloadsIdWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get zip Get a zip file of a previously created download object
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ApiResponse of ExpiringUrl</returns>
        public ApiResponse< ExpiringUrl > GetDownloadsIdWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DownloadsApi->GetDownloadsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->GetDownloadsId");

            var localVarPath = "/downloads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpiringUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExpiringUrl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpiringUrl)));
        }

        /// <summary>
        /// Get zip Get a zip file of a previously created download object
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ExpiringUrl</returns>
        public async System.Threading.Tasks.Task<ExpiringUrl> GetDownloadsIdAsync (int? id, int? workspaceId)
        {
             ApiResponse<ExpiringUrl> localVarResponse = await GetDownloadsIdAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get zip Get a zip file of a previously created download object
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of download</param>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ApiResponse (ExpiringUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpiringUrl>> GetDownloadsIdAsyncWithHttpInfo (int? id, int? workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DownloadsApi->GetDownloadsId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->GetDownloadsId");

            var localVarPath = "/downloads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpiringUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExpiringUrl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpiringUrl)));
        }

        /// <summary>
        /// Get status of downloads for current user Get status of downloads created by current user within a specified workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Meta</returns>
        public Meta GetDownloadsStatusWorkspaceId (int? workspaceId)
        {
             ApiResponse<Meta> localVarResponse = GetDownloadsStatusWorkspaceIdWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get status of downloads for current user Get status of downloads created by current user within a specified workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>ApiResponse of Meta</returns>
        public ApiResponse< Meta > GetDownloadsStatusWorkspaceIdWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->GetDownloadsStatusWorkspaceId");

            var localVarPath = "/downloads/status/{workspace_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadsStatusWorkspaceId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meta)));
        }

        /// <summary>
        /// Get status of downloads for current user Get status of downloads created by current user within a specified workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of Meta</returns>
        public async System.Threading.Tasks.Task<Meta> GetDownloadsStatusWorkspaceIdAsync (int? workspaceId)
        {
             ApiResponse<Meta> localVarResponse = await GetDownloadsStatusWorkspaceIdAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get status of downloads for current user Get status of downloads created by current user within a specified workspace
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <returns>Task of ApiResponse (Meta)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Meta>> GetDownloadsStatusWorkspaceIdAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->GetDownloadsStatusWorkspaceId");

            var localVarPath = "/downloads/status/{workspace_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadsStatusWorkspaceId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meta)));
        }

        /// <summary>
        /// Create zip file Create download object containing folders and/or files
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <param name="downloadFolderIds">IDs of folders to include in download (optional)</param>
        /// <param name="downloadFileIds">IDs of files to include in download (optional)</param>
        /// <returns>Meta</returns>
        public Meta PostDownloads (int? workspaceId, List<int?> downloadFolderIds = null, List<int?> downloadFileIds = null)
        {
             ApiResponse<Meta> localVarResponse = PostDownloadsWithHttpInfo(workspaceId, downloadFolderIds, downloadFileIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create zip file Create download object containing folders and/or files
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <param name="downloadFolderIds">IDs of folders to include in download (optional)</param>
        /// <param name="downloadFileIds">IDs of files to include in download (optional)</param>
        /// <returns>ApiResponse of Meta</returns>
        public ApiResponse< Meta > PostDownloadsWithHttpInfo (int? workspaceId, List<int?> downloadFolderIds = null, List<int?> downloadFileIds = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->PostDownloads");

            var localVarPath = "/downloads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (downloadFolderIds != null) localVarFormParams.Add("download[folder_ids]", Configuration.ApiClient.ParameterToString(downloadFolderIds)); // form parameter
            if (downloadFileIds != null) localVarFormParams.Add("download[file_ids]", Configuration.ApiClient.ParameterToString(downloadFileIds)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDownloads", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meta)));
        }

        /// <summary>
        /// Create zip file Create download object containing folders and/or files
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <param name="downloadFolderIds">IDs of folders to include in download (optional)</param>
        /// <param name="downloadFileIds">IDs of files to include in download (optional)</param>
        /// <returns>Task of Meta</returns>
        public async System.Threading.Tasks.Task<Meta> PostDownloadsAsync (int? workspaceId, List<int?> downloadFolderIds = null, List<int?> downloadFileIds = null)
        {
             ApiResponse<Meta> localVarResponse = await PostDownloadsAsyncWithHttpInfo(workspaceId, downloadFolderIds, downloadFileIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create zip file Create download object containing folders and/or files
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of Workspace</param>
        /// <param name="downloadFolderIds">IDs of folders to include in download (optional)</param>
        /// <param name="downloadFileIds">IDs of files to include in download (optional)</param>
        /// <returns>Task of ApiResponse (Meta)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Meta>> PostDownloadsAsyncWithHttpInfo (int? workspaceId, List<int?> downloadFolderIds = null, List<int?> downloadFileIds = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DownloadsApi->PostDownloads");

            var localVarPath = "/downloads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (downloadFolderIds != null) localVarFormParams.Add("download[folder_ids]", Configuration.ApiClient.ParameterToString(downloadFolderIds)); // form parameter
            if (downloadFileIds != null) localVarFormParams.Add("download[file_ids]", Configuration.ApiClient.ParameterToString(downloadFileIds)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDownloads", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meta)));
        }

    }
}
