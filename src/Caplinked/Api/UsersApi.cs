/*
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Caplinked.Client;
using Caplinked.Model;

namespace Caplinked.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Delete user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user you want to delete</param>
        /// <returns>StatusMessage</returns>
        StatusMessage DeleteUsers (int? userId);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Delete user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user you want to delete</param>
        /// <returns>ApiResponse of StatusMessage</returns>
        ApiResponse<StatusMessage> DeleteUsersWithHttpInfo (int? userId);
        /// <summary>
        /// Get user information
        /// </summary>
        /// <remarks>
        /// Get user information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        User GetUsersMe ();

        /// <summary>
        /// Get user information
        /// </summary>
        /// <remarks>
        /// Get user information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUsersMeWithHttpInfo ();
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Create user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of new user</param>
        /// <param name="userFirstName">First of new user</param>
        /// <param name="userLastName">Last name of new user</param>
        /// <param name="userTimeZone">Time zone of new user (optional)</param>
        /// <returns>User</returns>
        User PostUsers (string userEmail, string userFirstName, string userLastName, string userTimeZone = null);

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Create user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of new user</param>
        /// <param name="userFirstName">First of new user</param>
        /// <param name="userLastName">Last name of new user</param>
        /// <param name="userTimeZone">Time zone of new user (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> PostUsersWithHttpInfo (string userEmail, string userFirstName, string userLastName, string userTimeZone = null);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update a user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of user to update (optional)</param>
        /// <param name="userFirstName">First name of user to update (optional)</param>
        /// <param name="userLastName">Last name of user to update (optional)</param>
        /// <param name="userTimeZone">Time zone of user to update (optional)</param>
        /// <returns>User</returns>
        User PutUsersMe (string userEmail = null, string userFirstName = null, string userLastName = null, string userTimeZone = null);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update a user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of user to update (optional)</param>
        /// <param name="userFirstName">First name of user to update (optional)</param>
        /// <param name="userLastName">Last name of user to update (optional)</param>
        /// <param name="userTimeZone">Time zone of user to update (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> PutUsersMeWithHttpInfo (string userEmail = null, string userFirstName = null, string userLastName = null, string userTimeZone = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Delete user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user you want to delete</param>
        /// <returns>Task of StatusMessage</returns>
        System.Threading.Tasks.Task<StatusMessage> DeleteUsersAsync (int? userId);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Delete user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user you want to delete</param>
        /// <returns>Task of ApiResponse (StatusMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusMessage>> DeleteUsersAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Get user information
        /// </summary>
        /// <remarks>
        /// Get user information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUsersMeAsync ();

        /// <summary>
        /// Get user information
        /// </summary>
        /// <remarks>
        /// Get user information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUsersMeAsyncWithHttpInfo ();
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Create user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of new user</param>
        /// <param name="userFirstName">First of new user</param>
        /// <param name="userLastName">Last name of new user</param>
        /// <param name="userTimeZone">Time zone of new user (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> PostUsersAsync (string userEmail, string userFirstName, string userLastName, string userTimeZone = null);

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Create user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of new user</param>
        /// <param name="userFirstName">First of new user</param>
        /// <param name="userLastName">Last name of new user</param>
        /// <param name="userTimeZone">Time zone of new user (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> PostUsersAsyncWithHttpInfo (string userEmail, string userFirstName, string userLastName, string userTimeZone = null);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update a user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of user to update (optional)</param>
        /// <param name="userFirstName">First name of user to update (optional)</param>
        /// <param name="userLastName">Last name of user to update (optional)</param>
        /// <param name="userTimeZone">Time zone of user to update (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> PutUsersMeAsync (string userEmail = null, string userFirstName = null, string userLastName = null, string userTimeZone = null);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update a user
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of user to update (optional)</param>
        /// <param name="userFirstName">First name of user to update (optional)</param>
        /// <param name="userLastName">Last name of user to update (optional)</param>
        /// <param name="userTimeZone">Time zone of user to update (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> PutUsersMeAsyncWithHttpInfo (string userEmail = null, string userFirstName = null, string userLastName = null, string userTimeZone = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Caplinked.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Caplinked.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete user Delete user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user you want to delete</param>
        /// <returns>StatusMessage</returns>
        public StatusMessage DeleteUsers (int? userId)
        {
             ApiResponse<StatusMessage> localVarResponse = DeleteUsersWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete user Delete user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user you want to delete</param>
        /// <returns>ApiResponse of StatusMessage</returns>
        public ApiResponse< StatusMessage > DeleteUsersWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DeleteUsers");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.Add("user[id]", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusMessage)));
        }

        /// <summary>
        /// Delete user Delete user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user you want to delete</param>
        /// <returns>Task of StatusMessage</returns>
        public async System.Threading.Tasks.Task<StatusMessage> DeleteUsersAsync (int? userId)
        {
             ApiResponse<StatusMessage> localVarResponse = await DeleteUsersAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete user Delete user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user you want to delete</param>
        /// <returns>Task of ApiResponse (StatusMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusMessage>> DeleteUsersAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DeleteUsers");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.Add("user[id]", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusMessage)));
        }

        /// <summary>
        /// Get user information Get user information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        public User GetUsersMe ()
        {
             ApiResponse<User> localVarResponse = GetUsersMeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user information Get user information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUsersMeWithHttpInfo ()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get user information Get user information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUsersMeAsync ()
        {
             ApiResponse<User> localVarResponse = await GetUsersMeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user information Get user information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUsersMeAsyncWithHttpInfo ()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Create user Create user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of new user</param>
        /// <param name="userFirstName">First of new user</param>
        /// <param name="userLastName">Last name of new user</param>
        /// <param name="userTimeZone">Time zone of new user (optional)</param>
        /// <returns>User</returns>
        public User PostUsers (string userEmail, string userFirstName, string userLastName, string userTimeZone = null)
        {
             ApiResponse<User> localVarResponse = PostUsersWithHttpInfo(userEmail, userFirstName, userLastName, userTimeZone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create user Create user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of new user</param>
        /// <param name="userFirstName">First of new user</param>
        /// <param name="userLastName">Last name of new user</param>
        /// <param name="userTimeZone">Time zone of new user (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > PostUsersWithHttpInfo (string userEmail, string userFirstName, string userLastName, string userTimeZone = null)
        {
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling UsersApi->PostUsers");
            // verify the required parameter 'userFirstName' is set
            if (userFirstName == null)
                throw new ApiException(400, "Missing required parameter 'userFirstName' when calling UsersApi->PostUsers");
            // verify the required parameter 'userLastName' is set
            if (userLastName == null)
                throw new ApiException(400, "Missing required parameter 'userLastName' when calling UsersApi->PostUsers");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEmail != null) localVarFormParams.Add("user[email]", Configuration.ApiClient.ParameterToString(userEmail)); // form parameter
            if (userFirstName != null) localVarFormParams.Add("user[first_name]", Configuration.ApiClient.ParameterToString(userFirstName)); // form parameter
            if (userLastName != null) localVarFormParams.Add("user[last_name]", Configuration.ApiClient.ParameterToString(userLastName)); // form parameter
            if (userTimeZone != null) localVarFormParams.Add("user[time_zone]", Configuration.ApiClient.ParameterToString(userTimeZone)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Create user Create user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of new user</param>
        /// <param name="userFirstName">First of new user</param>
        /// <param name="userLastName">Last name of new user</param>
        /// <param name="userTimeZone">Time zone of new user (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> PostUsersAsync (string userEmail, string userFirstName, string userLastName, string userTimeZone = null)
        {
             ApiResponse<User> localVarResponse = await PostUsersAsyncWithHttpInfo(userEmail, userFirstName, userLastName, userTimeZone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create user Create user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of new user</param>
        /// <param name="userFirstName">First of new user</param>
        /// <param name="userLastName">Last name of new user</param>
        /// <param name="userTimeZone">Time zone of new user (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> PostUsersAsyncWithHttpInfo (string userEmail, string userFirstName, string userLastName, string userTimeZone = null)
        {
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling UsersApi->PostUsers");
            // verify the required parameter 'userFirstName' is set
            if (userFirstName == null)
                throw new ApiException(400, "Missing required parameter 'userFirstName' when calling UsersApi->PostUsers");
            // verify the required parameter 'userLastName' is set
            if (userLastName == null)
                throw new ApiException(400, "Missing required parameter 'userLastName' when calling UsersApi->PostUsers");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEmail != null) localVarFormParams.Add("user[email]", Configuration.ApiClient.ParameterToString(userEmail)); // form parameter
            if (userFirstName != null) localVarFormParams.Add("user[first_name]", Configuration.ApiClient.ParameterToString(userFirstName)); // form parameter
            if (userLastName != null) localVarFormParams.Add("user[last_name]", Configuration.ApiClient.ParameterToString(userLastName)); // form parameter
            if (userTimeZone != null) localVarFormParams.Add("user[time_zone]", Configuration.ApiClient.ParameterToString(userTimeZone)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Update a user Update a user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of user to update (optional)</param>
        /// <param name="userFirstName">First name of user to update (optional)</param>
        /// <param name="userLastName">Last name of user to update (optional)</param>
        /// <param name="userTimeZone">Time zone of user to update (optional)</param>
        /// <returns>User</returns>
        public User PutUsersMe (string userEmail = null, string userFirstName = null, string userLastName = null, string userTimeZone = null)
        {
             ApiResponse<User> localVarResponse = PutUsersMeWithHttpInfo(userEmail, userFirstName, userLastName, userTimeZone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user Update a user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of user to update (optional)</param>
        /// <param name="userFirstName">First name of user to update (optional)</param>
        /// <param name="userLastName">Last name of user to update (optional)</param>
        /// <param name="userTimeZone">Time zone of user to update (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > PutUsersMeWithHttpInfo (string userEmail = null, string userFirstName = null, string userLastName = null, string userTimeZone = null)
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEmail != null) localVarFormParams.Add("user[email]", Configuration.ApiClient.ParameterToString(userEmail)); // form parameter
            if (userFirstName != null) localVarFormParams.Add("user[first_name]", Configuration.ApiClient.ParameterToString(userFirstName)); // form parameter
            if (userLastName != null) localVarFormParams.Add("user[last_name]", Configuration.ApiClient.ParameterToString(userLastName)); // form parameter
            if (userTimeZone != null) localVarFormParams.Add("user[time_zone]", Configuration.ApiClient.ParameterToString(userTimeZone)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUsersMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Update a user Update a user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of user to update (optional)</param>
        /// <param name="userFirstName">First name of user to update (optional)</param>
        /// <param name="userLastName">Last name of user to update (optional)</param>
        /// <param name="userTimeZone">Time zone of user to update (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> PutUsersMeAsync (string userEmail = null, string userFirstName = null, string userLastName = null, string userTimeZone = null)
        {
             ApiResponse<User> localVarResponse = await PutUsersMeAsyncWithHttpInfo(userEmail, userFirstName, userLastName, userTimeZone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user Update a user
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmail">Email of user to update (optional)</param>
        /// <param name="userFirstName">First name of user to update (optional)</param>
        /// <param name="userLastName">Last name of user to update (optional)</param>
        /// <param name="userTimeZone">Time zone of user to update (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> PutUsersMeAsyncWithHttpInfo (string userEmail = null, string userFirstName = null, string userLastName = null, string userTimeZone = null)
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEmail != null) localVarFormParams.Add("user[email]", Configuration.ApiClient.ParameterToString(userEmail)); // form parameter
            if (userFirstName != null) localVarFormParams.Add("user[first_name]", Configuration.ApiClient.ParameterToString(userFirstName)); // form parameter
            if (userLastName != null) localVarFormParams.Add("user[last_name]", Configuration.ApiClient.ParameterToString(userLastName)); // form parameter
            if (userTimeZone != null) localVarFormParams.Add("user[time_zone]", Configuration.ApiClient.ParameterToString(userTimeZone)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUsersMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

    }
}
