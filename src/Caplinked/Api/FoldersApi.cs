/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Caplinked.Client;
using Caplinked.Model;

namespace Caplinked.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// Delete folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>FolderDelete</returns>
        FolderDelete DeleteFoldersId (int? id, string workspaceId);

        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// Delete folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>ApiResponse of FolderDelete</returns>
        ApiResponse<FolderDelete> DeleteFoldersIdWithHttpInfo (int? id, string workspaceId);
        /// <summary>
        /// Get folder information
        /// </summary>
        /// <remarks>
        /// Get folder information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>FolderContent</returns>
        FolderContent GetFoldersId (int? id, string workspaceId);

        /// <summary>
        /// Get folder information
        /// </summary>
        /// <remarks>
        /// Get folder information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>ApiResponse of FolderContent</returns>
        ApiResponse<FolderContent> GetFoldersIdWithHttpInfo (int? id, string workspaceId);
        /// <summary>
        /// Create new folder
        /// </summary>
        /// <remarks>
        /// Create new folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="name">Name of new folder</param>
        /// <param name="parentId">ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)</param>
        /// <returns>FolderMeta</returns>
        FolderMeta PostFolders (string workspaceId, string name, int? parentId = null);

        /// <summary>
        /// Create new folder
        /// </summary>
        /// <remarks>
        /// Create new folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="name">Name of new folder</param>
        /// <param name="parentId">ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)</param>
        /// <returns>ApiResponse of FolderMeta</returns>
        ApiResponse<FolderMeta> PostFoldersWithHttpInfo (string workspaceId, string name, int? parentId = null);
        /// <summary>
        /// Copy folder
        /// </summary>
        /// <remarks>
        /// Copy folder into another folder (existing folder will not be modified). The copied folder will inherit group folder permissions from its new parent folder.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>FolderCopyMove</returns>
        FolderCopyMove PostFoldersIdCopy (int? id, string workspaceId, int? destinationFolderId);

        /// <summary>
        /// Copy folder
        /// </summary>
        /// <remarks>
        /// Copy folder into another folder (existing folder will not be modified). The copied folder will inherit group folder permissions from its new parent folder.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>ApiResponse of FolderCopyMove</returns>
        ApiResponse<FolderCopyMove> PostFoldersIdCopyWithHttpInfo (int? id, string workspaceId, int? destinationFolderId);
        /// <summary>
        /// Move folder
        /// </summary>
        /// <remarks>
        /// Move folder into another folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>FolderCopyMove</returns>
        FolderCopyMove PostFoldersIdMove (int? id, string workspaceId, int? destinationFolderId);

        /// <summary>
        /// Move folder
        /// </summary>
        /// <remarks>
        /// Move folder into another folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>ApiResponse of FolderCopyMove</returns>
        ApiResponse<FolderCopyMove> PostFoldersIdMoveWithHttpInfo (int? id, string workspaceId, int? destinationFolderId);
        /// <summary>
        /// Update folder information
        /// </summary>
        /// <remarks>
        /// Update folder information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Update folder name and index</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="folderName">Name of folder (optional)</param>
        /// <param name="folderIndex">Index number of folder within current folder scope (integer) (optional)</param>
        /// <returns>FolderMeta</returns>
        FolderMeta PutFoldersId (int? id, string workspaceId, string folderName = null, int? folderIndex = null);

        /// <summary>
        /// Update folder information
        /// </summary>
        /// <remarks>
        /// Update folder information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Update folder name and index</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="folderName">Name of folder (optional)</param>
        /// <param name="folderIndex">Index number of folder within current folder scope (integer) (optional)</param>
        /// <returns>ApiResponse of FolderMeta</returns>
        ApiResponse<FolderMeta> PutFoldersIdWithHttpInfo (int? id, string workspaceId, string folderName = null, int? folderIndex = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// Delete folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of FolderDelete</returns>
        System.Threading.Tasks.Task<FolderDelete> DeleteFoldersIdAsync (int? id, string workspaceId);

        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// Delete folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of ApiResponse (FolderDelete)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderDelete>> DeleteFoldersIdAsyncWithHttpInfo (int? id, string workspaceId);
        /// <summary>
        /// Get folder information
        /// </summary>
        /// <remarks>
        /// Get folder information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of FolderContent</returns>
        System.Threading.Tasks.Task<FolderContent> GetFoldersIdAsync (int? id, string workspaceId);

        /// <summary>
        /// Get folder information
        /// </summary>
        /// <remarks>
        /// Get folder information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of ApiResponse (FolderContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderContent>> GetFoldersIdAsyncWithHttpInfo (int? id, string workspaceId);
        /// <summary>
        /// Create new folder
        /// </summary>
        /// <remarks>
        /// Create new folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="name">Name of new folder</param>
        /// <param name="parentId">ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)</param>
        /// <returns>Task of FolderMeta</returns>
        System.Threading.Tasks.Task<FolderMeta> PostFoldersAsync (string workspaceId, string name, int? parentId = null);

        /// <summary>
        /// Create new folder
        /// </summary>
        /// <remarks>
        /// Create new folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="name">Name of new folder</param>
        /// <param name="parentId">ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (FolderMeta)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderMeta>> PostFoldersAsyncWithHttpInfo (string workspaceId, string name, int? parentId = null);
        /// <summary>
        /// Copy folder
        /// </summary>
        /// <remarks>
        /// Copy folder into another folder (existing folder will not be modified). The copied folder will inherit group folder permissions from its new parent folder.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of FolderCopyMove</returns>
        System.Threading.Tasks.Task<FolderCopyMove> PostFoldersIdCopyAsync (int? id, string workspaceId, int? destinationFolderId);

        /// <summary>
        /// Copy folder
        /// </summary>
        /// <remarks>
        /// Copy folder into another folder (existing folder will not be modified). The copied folder will inherit group folder permissions from its new parent folder.
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of ApiResponse (FolderCopyMove)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderCopyMove>> PostFoldersIdCopyAsyncWithHttpInfo (int? id, string workspaceId, int? destinationFolderId);
        /// <summary>
        /// Move folder
        /// </summary>
        /// <remarks>
        /// Move folder into another folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of FolderCopyMove</returns>
        System.Threading.Tasks.Task<FolderCopyMove> PostFoldersIdMoveAsync (int? id, string workspaceId, int? destinationFolderId);

        /// <summary>
        /// Move folder
        /// </summary>
        /// <remarks>
        /// Move folder into another folder
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of ApiResponse (FolderCopyMove)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderCopyMove>> PostFoldersIdMoveAsyncWithHttpInfo (int? id, string workspaceId, int? destinationFolderId);
        /// <summary>
        /// Update folder information
        /// </summary>
        /// <remarks>
        /// Update folder information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Update folder name and index</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="folderName">Name of folder (optional)</param>
        /// <param name="folderIndex">Index number of folder within current folder scope (integer) (optional)</param>
        /// <returns>Task of FolderMeta</returns>
        System.Threading.Tasks.Task<FolderMeta> PutFoldersIdAsync (int? id, string workspaceId, string folderName = null, int? folderIndex = null);

        /// <summary>
        /// Update folder information
        /// </summary>
        /// <remarks>
        /// Update folder information
        /// </remarks>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Update folder name and index</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="folderName">Name of folder (optional)</param>
        /// <param name="folderIndex">Index number of folder within current folder scope (integer) (optional)</param>
        /// <returns>Task of ApiResponse (FolderMeta)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderMeta>> PutFoldersIdAsyncWithHttpInfo (int? id, string workspaceId, string folderName = null, int? folderIndex = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersApi : IFoldersApi
    {
        private Caplinked.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Caplinked.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Caplinked.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete folder Delete folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>FolderDelete</returns>
        public FolderDelete DeleteFoldersId (int? id, string workspaceId)
        {
             ApiResponse<FolderDelete> localVarResponse = DeleteFoldersIdWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete folder Delete folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>ApiResponse of FolderDelete</returns>
        public ApiResponse< FolderDelete > DeleteFoldersIdWithHttpInfo (int? id, string workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->DeleteFoldersId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->DeleteFoldersId");

            var localVarPath = "/folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFoldersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDelete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDelete) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDelete)));
        }

        /// <summary>
        /// Delete folder Delete folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of FolderDelete</returns>
        public async System.Threading.Tasks.Task<FolderDelete> DeleteFoldersIdAsync (int? id, string workspaceId)
        {
             ApiResponse<FolderDelete> localVarResponse = await DeleteFoldersIdAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete folder Delete folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to delete</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of ApiResponse (FolderDelete)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderDelete>> DeleteFoldersIdAsyncWithHttpInfo (int? id, string workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->DeleteFoldersId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->DeleteFoldersId");

            var localVarPath = "/folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFoldersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderDelete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderDelete) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderDelete)));
        }

        /// <summary>
        /// Get folder information Get folder information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>FolderContent</returns>
        public FolderContent GetFoldersId (int? id, string workspaceId)
        {
             ApiResponse<FolderContent> localVarResponse = GetFoldersIdWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get folder information Get folder information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>ApiResponse of FolderContent</returns>
        public ApiResponse< FolderContent > GetFoldersIdWithHttpInfo (int? id, string workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->GetFoldersId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->GetFoldersId");

            var localVarPath = "/folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoldersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderContent)));
        }

        /// <summary>
        /// Get folder information Get folder information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of FolderContent</returns>
        public async System.Threading.Tasks.Task<FolderContent> GetFoldersIdAsync (int? id, string workspaceId)
        {
             ApiResponse<FolderContent> localVarResponse = await GetFoldersIdAsyncWithHttpInfo(id, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get folder information Get folder information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <returns>Task of ApiResponse (FolderContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderContent>> GetFoldersIdAsyncWithHttpInfo (int? id, string workspaceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->GetFoldersId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->GetFoldersId");

            var localVarPath = "/folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarQueryParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoldersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderContent)));
        }

        /// <summary>
        /// Create new folder Create new folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="name">Name of new folder</param>
        /// <param name="parentId">ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)</param>
        /// <returns>FolderMeta</returns>
        public FolderMeta PostFolders (string workspaceId, string name, int? parentId = null)
        {
             ApiResponse<FolderMeta> localVarResponse = PostFoldersWithHttpInfo(workspaceId, name, parentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new folder Create new folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="name">Name of new folder</param>
        /// <param name="parentId">ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)</param>
        /// <returns>ApiResponse of FolderMeta</returns>
        public ApiResponse< FolderMeta > PostFoldersWithHttpInfo (string workspaceId, string name, int? parentId = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->PostFolders");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->PostFolders");

            var localVarPath = "/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parentId != null) localVarFormParams.Add("parent_id", Configuration.ApiClient.ParameterToString(parentId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderMeta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderMeta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderMeta)));
        }

        /// <summary>
        /// Create new folder Create new folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="name">Name of new folder</param>
        /// <param name="parentId">ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)</param>
        /// <returns>Task of FolderMeta</returns>
        public async System.Threading.Tasks.Task<FolderMeta> PostFoldersAsync (string workspaceId, string name, int? parentId = null)
        {
             ApiResponse<FolderMeta> localVarResponse = await PostFoldersAsyncWithHttpInfo(workspaceId, name, parentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new folder Create new folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="name">Name of new folder</param>
        /// <param name="parentId">ID of parent folder (defaults to root folder [id&#x3D;0]) (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (FolderMeta)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderMeta>> PostFoldersAsyncWithHttpInfo (string workspaceId, string name, int? parentId = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->PostFolders");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FoldersApi->PostFolders");

            var localVarPath = "/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parentId != null) localVarFormParams.Add("parent_id", Configuration.ApiClient.ParameterToString(parentId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderMeta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderMeta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderMeta)));
        }

        /// <summary>
        /// Copy folder Copy folder into another folder (existing folder will not be modified). The copied folder will inherit group folder permissions from its new parent folder.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>FolderCopyMove</returns>
        public FolderCopyMove PostFoldersIdCopy (int? id, string workspaceId, int? destinationFolderId)
        {
             ApiResponse<FolderCopyMove> localVarResponse = PostFoldersIdCopyWithHttpInfo(id, workspaceId, destinationFolderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy folder Copy folder into another folder (existing folder will not be modified). The copied folder will inherit group folder permissions from its new parent folder.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>ApiResponse of FolderCopyMove</returns>
        public ApiResponse< FolderCopyMove > PostFoldersIdCopyWithHttpInfo (int? id, string workspaceId, int? destinationFolderId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->PostFoldersIdCopy");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->PostFoldersIdCopy");
            // verify the required parameter 'destinationFolderId' is set
            if (destinationFolderId == null)
                throw new ApiException(400, "Missing required parameter 'destinationFolderId' when calling FoldersApi->PostFoldersIdCopy");

            var localVarPath = "/folders/{id}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (destinationFolderId != null) localVarFormParams.Add("destination_folder_id", Configuration.ApiClient.ParameterToString(destinationFolderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoldersIdCopy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderCopyMove>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderCopyMove) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderCopyMove)));
        }

        /// <summary>
        /// Copy folder Copy folder into another folder (existing folder will not be modified). The copied folder will inherit group folder permissions from its new parent folder.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of FolderCopyMove</returns>
        public async System.Threading.Tasks.Task<FolderCopyMove> PostFoldersIdCopyAsync (int? id, string workspaceId, int? destinationFolderId)
        {
             ApiResponse<FolderCopyMove> localVarResponse = await PostFoldersIdCopyAsyncWithHttpInfo(id, workspaceId, destinationFolderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy folder Copy folder into another folder (existing folder will not be modified). The copied folder will inherit group folder permissions from its new parent folder.
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to copy</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of ApiResponse (FolderCopyMove)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderCopyMove>> PostFoldersIdCopyAsyncWithHttpInfo (int? id, string workspaceId, int? destinationFolderId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->PostFoldersIdCopy");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->PostFoldersIdCopy");
            // verify the required parameter 'destinationFolderId' is set
            if (destinationFolderId == null)
                throw new ApiException(400, "Missing required parameter 'destinationFolderId' when calling FoldersApi->PostFoldersIdCopy");

            var localVarPath = "/folders/{id}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (destinationFolderId != null) localVarFormParams.Add("destination_folder_id", Configuration.ApiClient.ParameterToString(destinationFolderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoldersIdCopy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderCopyMove>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderCopyMove) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderCopyMove)));
        }

        /// <summary>
        /// Move folder Move folder into another folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>FolderCopyMove</returns>
        public FolderCopyMove PostFoldersIdMove (int? id, string workspaceId, int? destinationFolderId)
        {
             ApiResponse<FolderCopyMove> localVarResponse = PostFoldersIdMoveWithHttpInfo(id, workspaceId, destinationFolderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move folder Move folder into another folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>ApiResponse of FolderCopyMove</returns>
        public ApiResponse< FolderCopyMove > PostFoldersIdMoveWithHttpInfo (int? id, string workspaceId, int? destinationFolderId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->PostFoldersIdMove");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->PostFoldersIdMove");
            // verify the required parameter 'destinationFolderId' is set
            if (destinationFolderId == null)
                throw new ApiException(400, "Missing required parameter 'destinationFolderId' when calling FoldersApi->PostFoldersIdMove");

            var localVarPath = "/folders/{id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (destinationFolderId != null) localVarFormParams.Add("destination_folder_id", Configuration.ApiClient.ParameterToString(destinationFolderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoldersIdMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderCopyMove>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderCopyMove) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderCopyMove)));
        }

        /// <summary>
        /// Move folder Move folder into another folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of FolderCopyMove</returns>
        public async System.Threading.Tasks.Task<FolderCopyMove> PostFoldersIdMoveAsync (int? id, string workspaceId, int? destinationFolderId)
        {
             ApiResponse<FolderCopyMove> localVarResponse = await PostFoldersIdMoveAsyncWithHttpInfo(id, workspaceId, destinationFolderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move folder Move folder into another folder
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of folder to move</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="destinationFolderId">ID of destination parent folder</param>
        /// <returns>Task of ApiResponse (FolderCopyMove)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderCopyMove>> PostFoldersIdMoveAsyncWithHttpInfo (int? id, string workspaceId, int? destinationFolderId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->PostFoldersIdMove");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->PostFoldersIdMove");
            // verify the required parameter 'destinationFolderId' is set
            if (destinationFolderId == null)
                throw new ApiException(400, "Missing required parameter 'destinationFolderId' when calling FoldersApi->PostFoldersIdMove");

            var localVarPath = "/folders/{id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (destinationFolderId != null) localVarFormParams.Add("destination_folder_id", Configuration.ApiClient.ParameterToString(destinationFolderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoldersIdMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderCopyMove>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderCopyMove) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderCopyMove)));
        }

        /// <summary>
        /// Update folder information Update folder information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Update folder name and index</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="folderName">Name of folder (optional)</param>
        /// <param name="folderIndex">Index number of folder within current folder scope (integer) (optional)</param>
        /// <returns>FolderMeta</returns>
        public FolderMeta PutFoldersId (int? id, string workspaceId, string folderName = null, int? folderIndex = null)
        {
             ApiResponse<FolderMeta> localVarResponse = PutFoldersIdWithHttpInfo(id, workspaceId, folderName, folderIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update folder information Update folder information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Update folder name and index</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="folderName">Name of folder (optional)</param>
        /// <param name="folderIndex">Index number of folder within current folder scope (integer) (optional)</param>
        /// <returns>ApiResponse of FolderMeta</returns>
        public ApiResponse< FolderMeta > PutFoldersIdWithHttpInfo (int? id, string workspaceId, string folderName = null, int? folderIndex = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->PutFoldersId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->PutFoldersId");

            var localVarPath = "/folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (folderName != null) localVarFormParams.Add("folder[name]", Configuration.ApiClient.ParameterToString(folderName)); // form parameter
            if (folderIndex != null) localVarFormParams.Add("folder[index]", Configuration.ApiClient.ParameterToString(folderIndex)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFoldersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderMeta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderMeta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderMeta)));
        }

        /// <summary>
        /// Update folder information Update folder information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Update folder name and index</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="folderName">Name of folder (optional)</param>
        /// <param name="folderIndex">Index number of folder within current folder scope (integer) (optional)</param>
        /// <returns>Task of FolderMeta</returns>
        public async System.Threading.Tasks.Task<FolderMeta> PutFoldersIdAsync (int? id, string workspaceId, string folderName = null, int? folderIndex = null)
        {
             ApiResponse<FolderMeta> localVarResponse = await PutFoldersIdAsyncWithHttpInfo(id, workspaceId, folderName, folderIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update folder information Update folder information
        /// </summary>
        /// <exception cref="Caplinked.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Update folder name and index</param>
        /// <param name="workspaceId">ID of workspace</param>
        /// <param name="folderName">Name of folder (optional)</param>
        /// <param name="folderIndex">Index number of folder within current folder scope (integer) (optional)</param>
        /// <returns>Task of ApiResponse (FolderMeta)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderMeta>> PutFoldersIdAsyncWithHttpInfo (int? id, string workspaceId, string folderName = null, int? folderIndex = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersApi->PutFoldersId");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling FoldersApi->PutFoldersId");

            var localVarPath = "/folders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (workspaceId != null) localVarFormParams.Add("workspace_id", Configuration.ApiClient.ParameterToString(workspaceId)); // form parameter
            if (folderName != null) localVarFormParams.Add("folder[name]", Configuration.ApiClient.ParameterToString(folderName)); // form parameter
            if (folderIndex != null) localVarFormParams.Add("folder[index]", Configuration.ApiClient.ParameterToString(folderIndex)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFoldersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderMeta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderMeta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderMeta)));
        }

    }
}
