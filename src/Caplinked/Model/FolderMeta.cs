/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Caplinked.Client.SwaggerDateConverter;

namespace Caplinked.Model
{
    /// <summary>
    /// Update folder information
    /// </summary>
    [DataContract]
    public partial class FolderMeta :  IEquatable<FolderMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderMeta" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Path">Path.</param>
        /// <param name="OwnerType">OwnerType.</param>
        /// <param name="OwnerId">OwnerId.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        /// <param name="Index">Index.</param>
        /// <param name="LastUpdatedUserId">LastUpdatedUserId.</param>
        /// <param name="ParentPath">ParentPath.</param>
        /// <param name="ParentId">ParentId.</param>
        /// <param name="IdTree">IdTree.</param>
        public FolderMeta(int? Id = default(int?), string Name = default(string), string Path = default(string), string OwnerType = default(string), int? OwnerId = default(int?), string CreatedAt = default(string), string UpdatedAt = default(string), int? Index = default(int?), int? LastUpdatedUserId = default(int?), string ParentPath = default(string), int? ParentId = default(int?), int? IdTree = default(int?))
        {
            this.Id = Id;
            this.Name = Name;
            this.Path = Path;
            this.OwnerType = OwnerType;
            this.OwnerId = OwnerId;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
            this.Index = Index;
            this.LastUpdatedUserId = LastUpdatedUserId;
            this.ParentPath = ParentPath;
            this.ParentId = ParentId;
            this.IdTree = IdTree;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets OwnerType
        /// </summary>
        [DataMember(Name="owner_type", EmitDefaultValue=false)]
        public string OwnerType { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public int? OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdatedUserId
        /// </summary>
        [DataMember(Name="last_updated_user_id", EmitDefaultValue=false)]
        public int? LastUpdatedUserId { get; set; }

        /// <summary>
        /// Gets or Sets ParentPath
        /// </summary>
        [DataMember(Name="parent_path", EmitDefaultValue=false)]
        public string ParentPath { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parent_id", EmitDefaultValue=false)]
        public int? ParentId { get; set; }

        /// <summary>
        /// Gets or Sets IdTree
        /// </summary>
        [DataMember(Name="id_tree", EmitDefaultValue=false)]
        public int? IdTree { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderMeta {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  OwnerType: ").Append(OwnerType).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  LastUpdatedUserId: ").Append(LastUpdatedUserId).Append("\n");
            sb.Append("  ParentPath: ").Append(ParentPath).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  IdTree: ").Append(IdTree).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FolderMeta);
        }

        /// <summary>
        /// Returns true if FolderMeta instances are equal
        /// </summary>
        /// <param name="other">Instance of FolderMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderMeta other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                ) && 
                (
                    this.OwnerType == other.OwnerType ||
                    this.OwnerType != null &&
                    this.OwnerType.Equals(other.OwnerType)
                ) && 
                (
                    this.OwnerId == other.OwnerId ||
                    this.OwnerId != null &&
                    this.OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    this.Index == other.Index ||
                    this.Index != null &&
                    this.Index.Equals(other.Index)
                ) && 
                (
                    this.LastUpdatedUserId == other.LastUpdatedUserId ||
                    this.LastUpdatedUserId != null &&
                    this.LastUpdatedUserId.Equals(other.LastUpdatedUserId)
                ) && 
                (
                    this.ParentPath == other.ParentPath ||
                    this.ParentPath != null &&
                    this.ParentPath.Equals(other.ParentPath)
                ) && 
                (
                    this.ParentId == other.ParentId ||
                    this.ParentId != null &&
                    this.ParentId.Equals(other.ParentId)
                ) && 
                (
                    this.IdTree == other.IdTree ||
                    this.IdTree != null &&
                    this.IdTree.Equals(other.IdTree)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                if (this.OwnerType != null)
                    hash = hash * 59 + this.OwnerType.GetHashCode();
                if (this.OwnerId != null)
                    hash = hash * 59 + this.OwnerId.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                if (this.Index != null)
                    hash = hash * 59 + this.Index.GetHashCode();
                if (this.LastUpdatedUserId != null)
                    hash = hash * 59 + this.LastUpdatedUserId.GetHashCode();
                if (this.ParentPath != null)
                    hash = hash * 59 + this.ParentPath.GetHashCode();
                if (this.ParentId != null)
                    hash = hash * 59 + this.ParentId.GetHashCode();
                if (this.IdTree != null)
                    hash = hash * 59 + this.IdTree.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
