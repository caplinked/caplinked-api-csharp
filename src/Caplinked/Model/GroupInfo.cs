/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Caplinked.Client.SwaggerDateConverter;

namespace Caplinked.Model
{
    /// <summary>
    /// Disable access expiration for a group
    /// </summary>
    [DataContract]
    public partial class GroupInfo :  IEquatable<GroupInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupInfo" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="WorkspaceId">WorkspaceId.</param>
        /// <param name="DrmEnabled">DrmEnabled.</param>
        /// <param name="DrmExpiresAfter">DrmExpiresAfter.</param>
        /// <param name="ExpireWorkspaceAccess">ExpireWorkspaceAccess.</param>
        /// <param name="ExpireWorkspaceAccessAt">ExpireWorkspaceAccessAt.</param>
        /// <param name="Watermarked">Watermarked.</param>
        /// <param name="FileManagingAbilities">FileManagingAbilities.</param>
        public GroupInfo(int? Id = default(int?), string Name = default(string), int? WorkspaceId = default(int?), bool? DrmEnabled = default(bool?), string DrmExpiresAfter = default(string), string ExpireWorkspaceAccess = default(string), string ExpireWorkspaceAccessAt = default(string), bool? Watermarked = default(bool?), bool? FileManagingAbilities = default(bool?))
        {
            this.Id = Id;
            this.Name = Name;
            this.WorkspaceId = WorkspaceId;
            this.DrmEnabled = DrmEnabled;
            this.DrmExpiresAfter = DrmExpiresAfter;
            this.ExpireWorkspaceAccess = ExpireWorkspaceAccess;
            this.ExpireWorkspaceAccessAt = ExpireWorkspaceAccessAt;
            this.Watermarked = Watermarked;
            this.FileManagingAbilities = FileManagingAbilities;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public int? WorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets DrmEnabled
        /// </summary>
        [DataMember(Name="drm_enabled", EmitDefaultValue=false)]
        public bool? DrmEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DrmExpiresAfter
        /// </summary>
        [DataMember(Name="drm_expires_after", EmitDefaultValue=false)]
        public string DrmExpiresAfter { get; set; }

        /// <summary>
        /// Gets or Sets ExpireWorkspaceAccess
        /// </summary>
        [DataMember(Name="expire_workspace_access", EmitDefaultValue=false)]
        public string ExpireWorkspaceAccess { get; set; }

        /// <summary>
        /// Gets or Sets ExpireWorkspaceAccessAt
        /// </summary>
        [DataMember(Name="expire_workspace_access_at", EmitDefaultValue=false)]
        public string ExpireWorkspaceAccessAt { get; set; }

        /// <summary>
        /// Gets or Sets Watermarked
        /// </summary>
        [DataMember(Name="watermarked", EmitDefaultValue=false)]
        public bool? Watermarked { get; set; }

        /// <summary>
        /// Gets or Sets FileManagingAbilities
        /// </summary>
        [DataMember(Name="file_managing_abilities", EmitDefaultValue=false)]
        public bool? FileManagingAbilities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  DrmEnabled: ").Append(DrmEnabled).Append("\n");
            sb.Append("  DrmExpiresAfter: ").Append(DrmExpiresAfter).Append("\n");
            sb.Append("  ExpireWorkspaceAccess: ").Append(ExpireWorkspaceAccess).Append("\n");
            sb.Append("  ExpireWorkspaceAccessAt: ").Append(ExpireWorkspaceAccessAt).Append("\n");
            sb.Append("  Watermarked: ").Append(Watermarked).Append("\n");
            sb.Append("  FileManagingAbilities: ").Append(FileManagingAbilities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GroupInfo);
        }

        /// <summary>
        /// Returns true if GroupInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of GroupInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.WorkspaceId == other.WorkspaceId ||
                    this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(other.WorkspaceId)
                ) && 
                (
                    this.DrmEnabled == other.DrmEnabled ||
                    this.DrmEnabled != null &&
                    this.DrmEnabled.Equals(other.DrmEnabled)
                ) && 
                (
                    this.DrmExpiresAfter == other.DrmExpiresAfter ||
                    this.DrmExpiresAfter != null &&
                    this.DrmExpiresAfter.Equals(other.DrmExpiresAfter)
                ) && 
                (
                    this.ExpireWorkspaceAccess == other.ExpireWorkspaceAccess ||
                    this.ExpireWorkspaceAccess != null &&
                    this.ExpireWorkspaceAccess.Equals(other.ExpireWorkspaceAccess)
                ) && 
                (
                    this.ExpireWorkspaceAccessAt == other.ExpireWorkspaceAccessAt ||
                    this.ExpireWorkspaceAccessAt != null &&
                    this.ExpireWorkspaceAccessAt.Equals(other.ExpireWorkspaceAccessAt)
                ) && 
                (
                    this.Watermarked == other.Watermarked ||
                    this.Watermarked != null &&
                    this.Watermarked.Equals(other.Watermarked)
                ) && 
                (
                    this.FileManagingAbilities == other.FileManagingAbilities ||
                    this.FileManagingAbilities != null &&
                    this.FileManagingAbilities.Equals(other.FileManagingAbilities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.WorkspaceId != null)
                    hash = hash * 59 + this.WorkspaceId.GetHashCode();
                if (this.DrmEnabled != null)
                    hash = hash * 59 + this.DrmEnabled.GetHashCode();
                if (this.DrmExpiresAfter != null)
                    hash = hash * 59 + this.DrmExpiresAfter.GetHashCode();
                if (this.ExpireWorkspaceAccess != null)
                    hash = hash * 59 + this.ExpireWorkspaceAccess.GetHashCode();
                if (this.ExpireWorkspaceAccessAt != null)
                    hash = hash * 59 + this.ExpireWorkspaceAccessAt.GetHashCode();
                if (this.Watermarked != null)
                    hash = hash * 59 + this.Watermarked.GetHashCode();
                if (this.FileManagingAbilities != null)
                    hash = hash * 59 + this.FileManagingAbilities.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
