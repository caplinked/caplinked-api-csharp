/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Caplinked.Client.SwaggerDateConverter;

namespace Caplinked.Model
{
    /// <summary>
    /// Get folder information
    /// </summary>
    [DataContract]
    public partial class FolderContent :  IEquatable<FolderContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderContent" /> class.
        /// </summary>
        /// <param name="Folder">Folder.</param>
        /// <param name="ImmediateSubfolders">ImmediateSubfolders.</param>
        /// <param name="ImmediateSubfiles">ImmediateSubfiles.</param>
        public FolderContent(FolderMeta Folder = default(FolderMeta), FolderMeta ImmediateSubfolders = default(FolderMeta), FileInfoCompact ImmediateSubfiles = default(FileInfoCompact))
        {
            this.Folder = Folder;
            this.ImmediateSubfolders = ImmediateSubfolders;
            this.ImmediateSubfiles = ImmediateSubfiles;
        }
        
        /// <summary>
        /// Gets or Sets Folder
        /// </summary>
        [DataMember(Name="folder", EmitDefaultValue=false)]
        public FolderMeta Folder { get; set; }

        /// <summary>
        /// Gets or Sets ImmediateSubfolders
        /// </summary>
        [DataMember(Name="immediate_subfolders", EmitDefaultValue=false)]
        public FolderMeta ImmediateSubfolders { get; set; }

        /// <summary>
        /// Gets or Sets ImmediateSubfiles
        /// </summary>
        [DataMember(Name="immediate_subfiles", EmitDefaultValue=false)]
        public FileInfoCompact ImmediateSubfiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderContent {\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("  ImmediateSubfolders: ").Append(ImmediateSubfolders).Append("\n");
            sb.Append("  ImmediateSubfiles: ").Append(ImmediateSubfiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FolderContent);
        }

        /// <summary>
        /// Returns true if FolderContent instances are equal
        /// </summary>
        /// <param name="other">Instance of FolderContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderContent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Folder == other.Folder ||
                    this.Folder != null &&
                    this.Folder.Equals(other.Folder)
                ) && 
                (
                    this.ImmediateSubfolders == other.ImmediateSubfolders ||
                    this.ImmediateSubfolders != null &&
                    this.ImmediateSubfolders.Equals(other.ImmediateSubfolders)
                ) && 
                (
                    this.ImmediateSubfiles == other.ImmediateSubfiles ||
                    this.ImmediateSubfiles != null &&
                    this.ImmediateSubfiles.Equals(other.ImmediateSubfiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Folder != null)
                    hash = hash * 59 + this.Folder.GetHashCode();
                if (this.ImmediateSubfolders != null)
                    hash = hash * 59 + this.ImmediateSubfolders.GetHashCode();
                if (this.ImmediateSubfiles != null)
                    hash = hash * 59 + this.ImmediateSubfiles.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
