/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Caplinked.Client.SwaggerDateConverter;

namespace Caplinked.Model
{
    /// <summary>
    /// List subfolder permissions for a group. Will return an array of subfolders under the specified folder, along with their permissions information. For is_mixed_view, is_mixed_download, and is_mixed_upload: if attribute is set to true, it indicates that at least one (but not all) child folder with view, download, or upload attributes set to true, respectively. \&quot;All Folders\&quot; is the parent of all other folders within the workspace; its permissions will be returned if a folder is not specified.
    /// </summary>
    [DataContract]
    public partial class FolderList :  IEquatable<FolderList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderList" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="IdTree">IdTree.</param>
        /// <param name="Name">Name.</param>
        /// <param name="View">View.</param>
        /// <param name="Download">Download.</param>
        /// <param name="Upload">Upload.</param>
        /// <param name="Position">Position.</param>
        /// <param name="Index">Index.</param>
        /// <param name="IsMixedView">IsMixedView.</param>
        /// <param name="IsMixedDownload">IsMixedDownload.</param>
        /// <param name="IsMixedUpload">IsMixedUpload.</param>
        public FolderList(int? Id = default(int?), int? IdTree = default(int?), string Name = default(string), bool? View = default(bool?), bool? Download = default(bool?), bool? Upload = default(bool?), int? Position = default(int?), int? Index = default(int?), bool? IsMixedView = default(bool?), bool? IsMixedDownload = default(bool?), bool? IsMixedUpload = default(bool?))
        {
            this.Id = Id;
            this.IdTree = IdTree;
            this.Name = Name;
            this.View = View;
            this.Download = Download;
            this.Upload = Upload;
            this.Position = Position;
            this.Index = Index;
            this.IsMixedView = IsMixedView;
            this.IsMixedDownload = IsMixedDownload;
            this.IsMixedUpload = IsMixedUpload;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets IdTree
        /// </summary>
        [DataMember(Name="id_tree", EmitDefaultValue=false)]
        public int? IdTree { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets View
        /// </summary>
        [DataMember(Name="view", EmitDefaultValue=false)]
        public bool? View { get; set; }

        /// <summary>
        /// Gets or Sets Download
        /// </summary>
        [DataMember(Name="download", EmitDefaultValue=false)]
        public bool? Download { get; set; }

        /// <summary>
        /// Gets or Sets Upload
        /// </summary>
        [DataMember(Name="upload", EmitDefaultValue=false)]
        public bool? Upload { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// Gets or Sets IsMixedView
        /// </summary>
        [DataMember(Name="is_mixed_view", EmitDefaultValue=false)]
        public bool? IsMixedView { get; set; }

        /// <summary>
        /// Gets or Sets IsMixedDownload
        /// </summary>
        [DataMember(Name="is_mixed_download", EmitDefaultValue=false)]
        public bool? IsMixedDownload { get; set; }

        /// <summary>
        /// Gets or Sets IsMixedUpload
        /// </summary>
        [DataMember(Name="is_mixed_upload", EmitDefaultValue=false)]
        public bool? IsMixedUpload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdTree: ").Append(IdTree).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IsMixedView: ").Append(IsMixedView).Append("\n");
            sb.Append("  IsMixedDownload: ").Append(IsMixedDownload).Append("\n");
            sb.Append("  IsMixedUpload: ").Append(IsMixedUpload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FolderList);
        }

        /// <summary>
        /// Returns true if FolderList instances are equal
        /// </summary>
        /// <param name="other">Instance of FolderList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderList other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IdTree == other.IdTree ||
                    this.IdTree != null &&
                    this.IdTree.Equals(other.IdTree)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.View == other.View ||
                    this.View != null &&
                    this.View.Equals(other.View)
                ) && 
                (
                    this.Download == other.Download ||
                    this.Download != null &&
                    this.Download.Equals(other.Download)
                ) && 
                (
                    this.Upload == other.Upload ||
                    this.Upload != null &&
                    this.Upload.Equals(other.Upload)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.Index == other.Index ||
                    this.Index != null &&
                    this.Index.Equals(other.Index)
                ) && 
                (
                    this.IsMixedView == other.IsMixedView ||
                    this.IsMixedView != null &&
                    this.IsMixedView.Equals(other.IsMixedView)
                ) && 
                (
                    this.IsMixedDownload == other.IsMixedDownload ||
                    this.IsMixedDownload != null &&
                    this.IsMixedDownload.Equals(other.IsMixedDownload)
                ) && 
                (
                    this.IsMixedUpload == other.IsMixedUpload ||
                    this.IsMixedUpload != null &&
                    this.IsMixedUpload.Equals(other.IsMixedUpload)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IdTree != null)
                    hash = hash * 59 + this.IdTree.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.View != null)
                    hash = hash * 59 + this.View.GetHashCode();
                if (this.Download != null)
                    hash = hash * 59 + this.Download.GetHashCode();
                if (this.Upload != null)
                    hash = hash * 59 + this.Upload.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.Index != null)
                    hash = hash * 59 + this.Index.GetHashCode();
                if (this.IsMixedView != null)
                    hash = hash * 59 + this.IsMixedView.GetHashCode();
                if (this.IsMixedDownload != null)
                    hash = hash * 59 + this.IsMixedDownload.GetHashCode();
                if (this.IsMixedUpload != null)
                    hash = hash * 59 + this.IsMixedUpload.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
