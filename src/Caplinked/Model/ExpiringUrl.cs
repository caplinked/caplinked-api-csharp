/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Caplinked.Client.SwaggerDateConverter;

namespace Caplinked.Model
{
    /// <summary>
    /// Get a zip file of a previously created download object
    /// </summary>
    [DataContract]
    public partial class ExpiringUrl :  IEquatable<ExpiringUrl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpiringUrl" /> class.
        /// </summary>
        /// <param name="_ExpiringUrl">_ExpiringUrl.</param>
        /// <param name="FileName">FileName.</param>
        public ExpiringUrl(string _ExpiringUrl = default(string), string FileName = default(string))
        {
            this._ExpiringUrl = _ExpiringUrl;
            this.FileName = FileName;
        }
        
        /// <summary>
        /// Gets or Sets _ExpiringUrl
        /// </summary>
        [DataMember(Name="expiring_url", EmitDefaultValue=false)]
        public string _ExpiringUrl { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpiringUrl {\n");
            sb.Append("  _ExpiringUrl: ").Append(_ExpiringUrl).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExpiringUrl);
        }

        /// <summary>
        /// Returns true if ExpiringUrl instances are equal
        /// </summary>
        /// <param name="other">Instance of ExpiringUrl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpiringUrl other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._ExpiringUrl == other._ExpiringUrl ||
                    this._ExpiringUrl != null &&
                    this._ExpiringUrl.Equals(other._ExpiringUrl)
                ) && 
                (
                    this.FileName == other.FileName ||
                    this.FileName != null &&
                    this.FileName.Equals(other.FileName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._ExpiringUrl != null)
                    hash = hash * 59 + this._ExpiringUrl.GetHashCode();
                if (this.FileName != null)
                    hash = hash * 59 + this.FileName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
