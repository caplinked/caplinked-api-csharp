/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Caplinked.Client.SwaggerDateConverter;

namespace Caplinked.Model
{
    /// <summary>
    /// List custom watermarks for a team
    /// </summary>
    [DataContract]
    public partial class CustomWatermarkSetting :  IEquatable<CustomWatermarkSetting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomWatermarkSetting" /> class.
        /// </summary>
        /// <param name="WatermarkId">WatermarkId.</param>
        /// <param name="TeamId">TeamId.</param>
        /// <param name="CustomText">CustomText.</param>
        /// <param name="Color">Color.</param>
        /// <param name="Opacity">Opacity.</param>
        /// <param name="FontSize">FontSize.</param>
        /// <param name="Rotation">Rotation.</param>
        /// <param name="Hposition">Hposition.</param>
        /// <param name="Vposition">Vposition.</param>
        /// <param name="DisplayUserName">DisplayUserName.</param>
        /// <param name="DisplayUserEmail">DisplayUserEmail.</param>
        /// <param name="DisplayIpAddress">DisplayIpAddress.</param>
        /// <param name="DisplayTime">DisplayTime.</param>
        /// <param name="DisplayWorkspaceName">DisplayWorkspaceName.</param>
        public CustomWatermarkSetting(int? WatermarkId = default(int?), int? TeamId = default(int?), string CustomText = default(string), string Color = default(string), float? Opacity = default(float?), int? FontSize = default(int?), int? Rotation = default(int?), string Hposition = default(string), string Vposition = default(string), bool? DisplayUserName = default(bool?), bool? DisplayUserEmail = default(bool?), bool? DisplayIpAddress = default(bool?), bool? DisplayTime = default(bool?), bool? DisplayWorkspaceName = default(bool?))
        {
            this.WatermarkId = WatermarkId;
            this.TeamId = TeamId;
            this.CustomText = CustomText;
            this.Color = Color;
            this.Opacity = Opacity;
            this.FontSize = FontSize;
            this.Rotation = Rotation;
            this.Hposition = Hposition;
            this.Vposition = Vposition;
            this.DisplayUserName = DisplayUserName;
            this.DisplayUserEmail = DisplayUserEmail;
            this.DisplayIpAddress = DisplayIpAddress;
            this.DisplayTime = DisplayTime;
            this.DisplayWorkspaceName = DisplayWorkspaceName;
        }
        
        /// <summary>
        /// Gets or Sets WatermarkId
        /// </summary>
        [DataMember(Name="watermark_id", EmitDefaultValue=false)]
        public int? WatermarkId { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="team_id", EmitDefaultValue=false)]
        public int? TeamId { get; set; }

        /// <summary>
        /// Gets or Sets CustomText
        /// </summary>
        [DataMember(Name="custom_text", EmitDefaultValue=false)]
        public string CustomText { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Opacity
        /// </summary>
        [DataMember(Name="opacity", EmitDefaultValue=false)]
        public float? Opacity { get; set; }

        /// <summary>
        /// Gets or Sets FontSize
        /// </summary>
        [DataMember(Name="font_size", EmitDefaultValue=false)]
        public int? FontSize { get; set; }

        /// <summary>
        /// Gets or Sets Rotation
        /// </summary>
        [DataMember(Name="rotation", EmitDefaultValue=false)]
        public int? Rotation { get; set; }

        /// <summary>
        /// Gets or Sets Hposition
        /// </summary>
        [DataMember(Name="hposition", EmitDefaultValue=false)]
        public string Hposition { get; set; }

        /// <summary>
        /// Gets or Sets Vposition
        /// </summary>
        [DataMember(Name="vposition", EmitDefaultValue=false)]
        public string Vposition { get; set; }

        /// <summary>
        /// Gets or Sets DisplayUserName
        /// </summary>
        [DataMember(Name="display_user_name", EmitDefaultValue=false)]
        public bool? DisplayUserName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayUserEmail
        /// </summary>
        [DataMember(Name="display_user_email", EmitDefaultValue=false)]
        public bool? DisplayUserEmail { get; set; }

        /// <summary>
        /// Gets or Sets DisplayIpAddress
        /// </summary>
        [DataMember(Name="display_ip_address", EmitDefaultValue=false)]
        public bool? DisplayIpAddress { get; set; }

        /// <summary>
        /// Gets or Sets DisplayTime
        /// </summary>
        [DataMember(Name="display_time", EmitDefaultValue=false)]
        public bool? DisplayTime { get; set; }

        /// <summary>
        /// Gets or Sets DisplayWorkspaceName
        /// </summary>
        [DataMember(Name="display_workspace_name", EmitDefaultValue=false)]
        public bool? DisplayWorkspaceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomWatermarkSetting {\n");
            sb.Append("  WatermarkId: ").Append(WatermarkId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  CustomText: ").Append(CustomText).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Hposition: ").Append(Hposition).Append("\n");
            sb.Append("  Vposition: ").Append(Vposition).Append("\n");
            sb.Append("  DisplayUserName: ").Append(DisplayUserName).Append("\n");
            sb.Append("  DisplayUserEmail: ").Append(DisplayUserEmail).Append("\n");
            sb.Append("  DisplayIpAddress: ").Append(DisplayIpAddress).Append("\n");
            sb.Append("  DisplayTime: ").Append(DisplayTime).Append("\n");
            sb.Append("  DisplayWorkspaceName: ").Append(DisplayWorkspaceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomWatermarkSetting);
        }

        /// <summary>
        /// Returns true if CustomWatermarkSetting instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomWatermarkSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomWatermarkSetting other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.WatermarkId == other.WatermarkId ||
                    this.WatermarkId != null &&
                    this.WatermarkId.Equals(other.WatermarkId)
                ) && 
                (
                    this.TeamId == other.TeamId ||
                    this.TeamId != null &&
                    this.TeamId.Equals(other.TeamId)
                ) && 
                (
                    this.CustomText == other.CustomText ||
                    this.CustomText != null &&
                    this.CustomText.Equals(other.CustomText)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                ) && 
                (
                    this.Opacity == other.Opacity ||
                    this.Opacity != null &&
                    this.Opacity.Equals(other.Opacity)
                ) && 
                (
                    this.FontSize == other.FontSize ||
                    this.FontSize != null &&
                    this.FontSize.Equals(other.FontSize)
                ) && 
                (
                    this.Rotation == other.Rotation ||
                    this.Rotation != null &&
                    this.Rotation.Equals(other.Rotation)
                ) && 
                (
                    this.Hposition == other.Hposition ||
                    this.Hposition != null &&
                    this.Hposition.Equals(other.Hposition)
                ) && 
                (
                    this.Vposition == other.Vposition ||
                    this.Vposition != null &&
                    this.Vposition.Equals(other.Vposition)
                ) && 
                (
                    this.DisplayUserName == other.DisplayUserName ||
                    this.DisplayUserName != null &&
                    this.DisplayUserName.Equals(other.DisplayUserName)
                ) && 
                (
                    this.DisplayUserEmail == other.DisplayUserEmail ||
                    this.DisplayUserEmail != null &&
                    this.DisplayUserEmail.Equals(other.DisplayUserEmail)
                ) && 
                (
                    this.DisplayIpAddress == other.DisplayIpAddress ||
                    this.DisplayIpAddress != null &&
                    this.DisplayIpAddress.Equals(other.DisplayIpAddress)
                ) && 
                (
                    this.DisplayTime == other.DisplayTime ||
                    this.DisplayTime != null &&
                    this.DisplayTime.Equals(other.DisplayTime)
                ) && 
                (
                    this.DisplayWorkspaceName == other.DisplayWorkspaceName ||
                    this.DisplayWorkspaceName != null &&
                    this.DisplayWorkspaceName.Equals(other.DisplayWorkspaceName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.WatermarkId != null)
                    hash = hash * 59 + this.WatermarkId.GetHashCode();
                if (this.TeamId != null)
                    hash = hash * 59 + this.TeamId.GetHashCode();
                if (this.CustomText != null)
                    hash = hash * 59 + this.CustomText.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                if (this.Opacity != null)
                    hash = hash * 59 + this.Opacity.GetHashCode();
                if (this.FontSize != null)
                    hash = hash * 59 + this.FontSize.GetHashCode();
                if (this.Rotation != null)
                    hash = hash * 59 + this.Rotation.GetHashCode();
                if (this.Hposition != null)
                    hash = hash * 59 + this.Hposition.GetHashCode();
                if (this.Vposition != null)
                    hash = hash * 59 + this.Vposition.GetHashCode();
                if (this.DisplayUserName != null)
                    hash = hash * 59 + this.DisplayUserName.GetHashCode();
                if (this.DisplayUserEmail != null)
                    hash = hash * 59 + this.DisplayUserEmail.GetHashCode();
                if (this.DisplayIpAddress != null)
                    hash = hash * 59 + this.DisplayIpAddress.GetHashCode();
                if (this.DisplayTime != null)
                    hash = hash * 59 + this.DisplayTime.GetHashCode();
                if (this.DisplayWorkspaceName != null)
                    hash = hash * 59 + this.DisplayWorkspaceName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
