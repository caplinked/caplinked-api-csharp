/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Caplinked.Client;
using Caplinked.Api;
using Caplinked.Model;

namespace Caplinked.Test
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GroupsApiTests
    {
        private GroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupsApi
            //Assert.IsInstanceOfType(typeof(GroupsApi), instance, "instance is a GroupsApi");
        }

        
        /// <summary>
        /// Test DeleteGroupsId
        /// </summary>
        [Test]
        public void DeleteGroupsIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //var response = instance.DeleteGroupsId(id, workspaceId);
            //Assert.IsInstanceOf<GroupInfoDeleted> (response, "response is GroupInfoDeleted");
        }
        
        /// <summary>
        /// Test DeleteGroupsIdMemberships
        /// </summary>
        [Test]
        public void DeleteGroupsIdMembershipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //int? userId = null;
            //instance.DeleteGroupsIdMemberships(id, workspaceId, userId);
            
        }
        
        /// <summary>
        /// Test GetGroups
        /// </summary>
        [Test]
        public void GetGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetGroups(workspaceId);
            //Assert.IsInstanceOf<GroupInfo> (response, "response is GroupInfo");
        }
        
        /// <summary>
        /// Test GetGroupsId
        /// </summary>
        [Test]
        public void GetGroupsIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //var response = instance.GetGroupsId(id, workspaceId);
            //Assert.IsInstanceOf<GroupInfo> (response, "response is GroupInfo");
        }
        
        /// <summary>
        /// Test GetGroupsIdMemberships
        /// </summary>
        [Test]
        public void GetGroupsIdMembershipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //var response = instance.GetGroupsIdMemberships(id, workspaceId);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test PostGroups
        /// </summary>
        [Test]
        public void PostGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupName = null;
            //int? groupWorkspaceId = null;
            //bool? groupFileManagingAbilities = null;
            //var response = instance.PostGroups(groupName, groupWorkspaceId, groupFileManagingAbilities);
            //Assert.IsInstanceOf<GroupInfo> (response, "response is GroupInfo");
        }
        
        /// <summary>
        /// Test PostGroupsIdMemberships
        /// </summary>
        [Test]
        public void PostGroupsIdMembershipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //int? userId = null;
            //bool? sendEmail = null;
            //instance.PostGroupsIdMemberships(id, workspaceId, userId, sendEmail);
            
        }
        
        /// <summary>
        /// Test PutGroupsId
        /// </summary>
        [Test]
        public void PutGroupsIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //string groupName = null;
            //bool? groupFileManagingAbilities = null;
            //var response = instance.PutGroupsId(id, workspaceId, groupName, groupFileManagingAbilities);
            //Assert.IsInstanceOf<GroupInfo> (response, "response is GroupInfo");
        }
        
        /// <summary>
        /// Test PutGroupsIdDisableDrmExpiration
        /// </summary>
        [Test]
        public void PutGroupsIdDisableDrmExpirationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //var response = instance.PutGroupsIdDisableDrmExpiration(id, workspaceId);
            //Assert.IsInstanceOf<GroupInfo> (response, "response is GroupInfo");
        }
        
        /// <summary>
        /// Test PutGroupsIdDisableExpireAccess
        /// </summary>
        [Test]
        public void PutGroupsIdDisableExpireAccessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //var response = instance.PutGroupsIdDisableExpireAccess(id, workspaceId);
            //Assert.IsInstanceOf<GroupInfo> (response, "response is GroupInfo");
        }
        
        /// <summary>
        /// Test PutGroupsIdDrm
        /// </summary>
        [Test]
        public void PutGroupsIdDrmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //string groupDrmEnabled = null;
            //DateTime? groupDrmExpiresAfter = null;
            //var response = instance.PutGroupsIdDrm(id, workspaceId, groupDrmEnabled, groupDrmExpiresAfter);
            //Assert.IsInstanceOf<GroupInfo> (response, "response is GroupInfo");
        }
        
        /// <summary>
        /// Test PutGroupsIdEnableExpireAccess
        /// </summary>
        [Test]
        public void PutGroupsIdEnableExpireAccessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //DateTime? groupExpireWorkspaceAccessAt = null;
            //var response = instance.PutGroupsIdEnableExpireAccess(id, workspaceId, groupExpireWorkspaceAccessAt);
            //Assert.IsInstanceOf<GroupInfo> (response, "response is GroupInfo");
        }
        
        /// <summary>
        /// Test PutGroupsIdWatermarking
        /// </summary>
        [Test]
        public void PutGroupsIdWatermarkingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //bool? groupWatermarking = null;
            //var response = instance.PutGroupsIdWatermarking(id, workspaceId, groupWatermarking);
            //Assert.IsInstanceOf<GroupInfo> (response, "response is GroupInfo");
        }
        
    }

}
