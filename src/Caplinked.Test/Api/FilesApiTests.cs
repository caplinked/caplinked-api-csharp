/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Caplinked.Client;
using Caplinked.Api;
using Caplinked.Model;

namespace Caplinked.Test
{
    /// <summary>
    ///  Class for testing FilesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FilesApiTests
    {
        private FilesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FilesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FilesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FilesApi
            //Assert.IsInstanceOfType(typeof(FilesApi), instance, "instance is a FilesApi");
        }

        
        /// <summary>
        /// Test DeleteFilesId
        /// </summary>
        [Test]
        public void DeleteFilesIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //var response = instance.DeleteFilesId(id, workspaceId);
            //Assert.IsInstanceOf<FileDelete> (response, "response is FileDelete");
        }
        
        /// <summary>
        /// Test GetFilesId
        /// </summary>
        [Test]
        public void GetFilesIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //int? pageNumber = null;
            //var response = instance.GetFilesId(id, workspaceId, pageNumber);
            //Assert.IsInstanceOf<FileInfoMapped> (response, "response is FileInfoMapped");
        }
        
        /// <summary>
        /// Test PostFilesIdCopy
        /// </summary>
        [Test]
        public void PostFilesIdCopyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //int? destinationFolderId = null;
            //var response = instance.PostFilesIdCopy(id, workspaceId, destinationFolderId);
            //Assert.IsInstanceOf<FileCopyMove> (response, "response is FileCopyMove");
        }
        
        /// <summary>
        /// Test PostFilesIdMove
        /// </summary>
        [Test]
        public void PostFilesIdMoveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //int? destinationFolderId = null;
            //var response = instance.PostFilesIdMove(id, workspaceId, destinationFolderId);
            //Assert.IsInstanceOf<FileCopyMove> (response, "response is FileCopyMove");
        }
        
        /// <summary>
        /// Test PutFilesId
        /// </summary>
        [Test]
        public void PutFilesIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //string fileTitle = null;
            //int? fileIndex = null;
            //var response = instance.PutFilesId(id, workspaceId, fileTitle, fileIndex);
            //Assert.IsInstanceOf<FileInfoMapped> (response, "response is FileInfoMapped");
        }
        
        /// <summary>
        /// Test PutFilesUpload
        /// </summary>
        [Test]
        public void PutFilesUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? folderId = null;
            //string fileName = null;
            //var response = instance.PutFilesUpload(workspaceId, folderId, fileName);
            //Assert.IsInstanceOf<FileInfoCompact> (response, "response is FileInfoCompact");
        }
        
    }

}
