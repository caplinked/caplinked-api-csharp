/* 
 * CapLinked API v1.0
 *
 * Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.
 *
 * OpenAPI spec version: 2017-05-23
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Caplinked.Client;
using Caplinked.Api;
using Caplinked.Model;

namespace Caplinked.Test
{
    /// <summary>
    ///  Class for testing DownloadsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DownloadsApiTests
    {
        private DownloadsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DownloadsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DownloadsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DownloadsApi
            //Assert.IsInstanceOfType(typeof(DownloadsApi), instance, "instance is a DownloadsApi");
        }

        
        /// <summary>
        /// Test DeleteDownloadsId
        /// </summary>
        [Test]
        public void DeleteDownloadsIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //var response = instance.DeleteDownloadsId(id, workspaceId);
            //Assert.IsInstanceOf<Delete> (response, "response is Delete");
        }
        
        /// <summary>
        /// Test GetDownloadsFileFileId
        /// </summary>
        [Test]
        public void GetDownloadsFileFileIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fileId = null;
            //int? workspaceId = null;
            //var response = instance.GetDownloadsFileFileId(fileId, workspaceId);
            //Assert.IsInstanceOf<ExpiringUrl> (response, "response is ExpiringUrl");
        }
        
        /// <summary>
        /// Test GetDownloadsId
        /// </summary>
        [Test]
        public void GetDownloadsIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? workspaceId = null;
            //var response = instance.GetDownloadsId(id, workspaceId);
            //Assert.IsInstanceOf<ExpiringUrl> (response, "response is ExpiringUrl");
        }
        
        /// <summary>
        /// Test GetDownloadsStatusWorkspaceId
        /// </summary>
        [Test]
        public void GetDownloadsStatusWorkspaceIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetDownloadsStatusWorkspaceId(workspaceId);
            //Assert.IsInstanceOf<Meta> (response, "response is Meta");
        }
        
        /// <summary>
        /// Test PostDownloads
        /// </summary>
        [Test]
        public void PostDownloadsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //List<int?> downloadFolderIds = null;
            //List<int?> downloadFileIds = null;
            //var response = instance.PostDownloads(workspaceId, downloadFolderIds, downloadFileIds);
            //Assert.IsInstanceOf<Meta> (response, "response is Meta");
        }
        
    }

}
